// Code generated by MockGen. DO NOT EDIT.
// Source: device_definition_repo.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	models "github.com/DIMO-Network/poc-dimo-api/device-definitions-api/internal/infrastructure/db/models"
	gomock "github.com/golang/mock/gomock"
)

// MockIDeviceDefinitionRepository is a mock of IDeviceDefinitionRepository interface.
type MockIDeviceDefinitionRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIDeviceDefinitionRepositoryMockRecorder
}

// MockIDeviceDefinitionRepositoryMockRecorder is the mock recorder for MockIDeviceDefinitionRepository.
type MockIDeviceDefinitionRepositoryMockRecorder struct {
	mock *MockIDeviceDefinitionRepository
}

// NewMockIDeviceDefinitionRepository creates a new mock instance.
func NewMockIDeviceDefinitionRepository(ctrl *gomock.Controller) *MockIDeviceDefinitionRepository {
	mock := &MockIDeviceDefinitionRepository{ctrl: ctrl}
	mock.recorder = &MockIDeviceDefinitionRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIDeviceDefinitionRepository) EXPECT() *MockIDeviceDefinitionRepositoryMockRecorder {
	return m.recorder
}

// GetAll mocks base method.
func (m *MockIDeviceDefinitionRepository) GetAll(ctx context.Context) ([]*models.DeviceDefinition, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", ctx)
	ret0, _ := ret[0].([]*models.DeviceDefinition)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockIDeviceDefinitionRepositoryMockRecorder) GetAll(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockIDeviceDefinitionRepository)(nil).GetAll), ctx)
}

// GetById mocks base method.
func (m *MockIDeviceDefinitionRepository) GetById(ctx context.Context, id string) (*models.DeviceDefinition, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetById", ctx, id)
	ret0, _ := ret[0].(*models.DeviceDefinition)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetById indicates an expected call of GetById.
func (mr *MockIDeviceDefinitionRepositoryMockRecorder) GetById(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetById", reflect.TypeOf((*MockIDeviceDefinitionRepository)(nil).GetById), ctx, id)
}

// GetByMakeModelAndYears mocks base method.
func (m *MockIDeviceDefinitionRepository) GetByMakeModelAndYears(ctx context.Context, make, model string, year int, loadIntegrations bool) (*models.DeviceDefinition, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByMakeModelAndYears", ctx, make, model, year, loadIntegrations)
	ret0, _ := ret[0].(*models.DeviceDefinition)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByMakeModelAndYears indicates an expected call of GetByMakeModelAndYears.
func (mr *MockIDeviceDefinitionRepositoryMockRecorder) GetByMakeModelAndYears(ctx, make, model, year, loadIntegrations interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByMakeModelAndYears", reflect.TypeOf((*MockIDeviceDefinitionRepository)(nil).GetByMakeModelAndYears), ctx, make, model, year, loadIntegrations)
}

// GetWithIntegrations mocks base method.
func (m *MockIDeviceDefinitionRepository) GetWithIntegrations(ctx context.Context, id string) (*models.DeviceDefinition, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWithIntegrations", ctx, id)
	ret0, _ := ret[0].(*models.DeviceDefinition)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWithIntegrations indicates an expected call of GetWithIntegrations.
func (mr *MockIDeviceDefinitionRepositoryMockRecorder) GetWithIntegrations(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWithIntegrations", reflect.TypeOf((*MockIDeviceDefinitionRepository)(nil).GetWithIntegrations), ctx, id)
}
