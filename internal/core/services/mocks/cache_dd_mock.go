// Code generated by MockGen. DO NOT EDIT.
// Source: cache_dd.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	models "github.com/DIMO-Network/device-definitions-api/internal/core/models"
	gomock "github.com/golang/mock/gomock"
)

// MockDeviceDefinitionCacheService is a mock of DeviceDefinitionCacheService interface.
type MockDeviceDefinitionCacheService struct {
	ctrl     *gomock.Controller
	recorder *MockDeviceDefinitionCacheServiceMockRecorder
}

// MockDeviceDefinitionCacheServiceMockRecorder is the mock recorder for MockDeviceDefinitionCacheService.
type MockDeviceDefinitionCacheServiceMockRecorder struct {
	mock *MockDeviceDefinitionCacheService
}

// NewMockDeviceDefinitionCacheService creates a new mock instance.
func NewMockDeviceDefinitionCacheService(ctrl *gomock.Controller) *MockDeviceDefinitionCacheService {
	mock := &MockDeviceDefinitionCacheService{ctrl: ctrl}
	mock.recorder = &MockDeviceDefinitionCacheServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDeviceDefinitionCacheService) EXPECT() *MockDeviceDefinitionCacheServiceMockRecorder {
	return m.recorder
}

// DeleteDeviceDefinitionCacheByID mocks base method.
func (m *MockDeviceDefinitionCacheService) DeleteDeviceDefinitionCacheByID(ctx context.Context, id string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "DeleteDeviceDefinitionCacheByID", ctx, id)
}

// DeleteDeviceDefinitionCacheByID indicates an expected call of DeleteDeviceDefinitionCacheByID.
func (mr *MockDeviceDefinitionCacheServiceMockRecorder) DeleteDeviceDefinitionCacheByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDeviceDefinitionCacheByID", reflect.TypeOf((*MockDeviceDefinitionCacheService)(nil).DeleteDeviceDefinitionCacheByID), ctx, id)
}

// DeleteDeviceDefinitionCacheByMakeModelAndYears mocks base method.
func (m *MockDeviceDefinitionCacheService) DeleteDeviceDefinitionCacheByMakeModelAndYears(ctx context.Context, make, model string, year int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "DeleteDeviceDefinitionCacheByMakeModelAndYears", ctx, make, model, year)
}

// DeleteDeviceDefinitionCacheByMakeModelAndYears indicates an expected call of DeleteDeviceDefinitionCacheByMakeModelAndYears.
func (mr *MockDeviceDefinitionCacheServiceMockRecorder) DeleteDeviceDefinitionCacheByMakeModelAndYears(ctx, make, model, year interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDeviceDefinitionCacheByMakeModelAndYears", reflect.TypeOf((*MockDeviceDefinitionCacheService)(nil).DeleteDeviceDefinitionCacheByMakeModelAndYears), ctx, make, model, year)
}

// DeleteDeviceDefinitionCacheBySlug mocks base method.
func (m *MockDeviceDefinitionCacheService) DeleteDeviceDefinitionCacheBySlug(ctx context.Context, slug string, year int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "DeleteDeviceDefinitionCacheBySlug", ctx, slug, year)
}

// DeleteDeviceDefinitionCacheBySlug indicates an expected call of DeleteDeviceDefinitionCacheBySlug.
func (mr *MockDeviceDefinitionCacheServiceMockRecorder) DeleteDeviceDefinitionCacheBySlug(ctx, slug, year interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDeviceDefinitionCacheBySlug", reflect.TypeOf((*MockDeviceDefinitionCacheService)(nil).DeleteDeviceDefinitionCacheBySlug), ctx, slug, year)
}

// GetDeviceDefinitionByID mocks base method.
func (m *MockDeviceDefinitionCacheService) GetDeviceDefinitionByID(ctx context.Context, id string) (*models.GetDeviceDefinitionQueryResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDeviceDefinitionByID", ctx, id)
	ret0, _ := ret[0].(*models.GetDeviceDefinitionQueryResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDeviceDefinitionByID indicates an expected call of GetDeviceDefinitionByID.
func (mr *MockDeviceDefinitionCacheServiceMockRecorder) GetDeviceDefinitionByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeviceDefinitionByID", reflect.TypeOf((*MockDeviceDefinitionCacheService)(nil).GetDeviceDefinitionByID), ctx, id)
}

// GetDeviceDefinitionByMakeModelAndYears mocks base method.
func (m *MockDeviceDefinitionCacheService) GetDeviceDefinitionByMakeModelAndYears(ctx context.Context, make, model string, year int) (*models.GetDeviceDefinitionQueryResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDeviceDefinitionByMakeModelAndYears", ctx, make, model, year)
	ret0, _ := ret[0].(*models.GetDeviceDefinitionQueryResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDeviceDefinitionByMakeModelAndYears indicates an expected call of GetDeviceDefinitionByMakeModelAndYears.
func (mr *MockDeviceDefinitionCacheServiceMockRecorder) GetDeviceDefinitionByMakeModelAndYears(ctx, make, model, year interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeviceDefinitionByMakeModelAndYears", reflect.TypeOf((*MockDeviceDefinitionCacheService)(nil).GetDeviceDefinitionByMakeModelAndYears), ctx, make, model, year)
}

// GetDeviceDefinitionBySlug mocks base method.
func (m *MockDeviceDefinitionCacheService) GetDeviceDefinitionBySlug(ctx context.Context, slug string, year int) (*models.GetDeviceDefinitionQueryResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDeviceDefinitionBySlug", ctx, slug, year)
	ret0, _ := ret[0].(*models.GetDeviceDefinitionQueryResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDeviceDefinitionBySlug indicates an expected call of GetDeviceDefinitionBySlug.
func (mr *MockDeviceDefinitionCacheServiceMockRecorder) GetDeviceDefinitionBySlug(ctx, slug, year interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeviceDefinitionBySlug", reflect.TypeOf((*MockDeviceDefinitionCacheService)(nil).GetDeviceDefinitionBySlug), ctx, slug, year)
}
