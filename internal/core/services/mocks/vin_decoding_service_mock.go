// Code generated by MockGen. DO NOT EDIT.
// Source: vin_decoding_service.go
//
// Generated by this command:
//
//	mockgen -source vin_decoding_service.go -destination mocks/vin_decoding_service_mock.go -package mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	models "github.com/DIMO-Network/device-definitions-api/internal/core/models"
	models0 "github.com/DIMO-Network/device-definitions-api/internal/infrastructure/db/models"
	gomock "go.uber.org/mock/gomock"
)

// MockVINDecodingService is a mock of VINDecodingService interface.
type MockVINDecodingService struct {
	ctrl     *gomock.Controller
	recorder *MockVINDecodingServiceMockRecorder
}

// MockVINDecodingServiceMockRecorder is the mock recorder for MockVINDecodingService.
type MockVINDecodingServiceMockRecorder struct {
	mock *MockVINDecodingService
}

// NewMockVINDecodingService creates a new mock instance.
func NewMockVINDecodingService(ctrl *gomock.Controller) *MockVINDecodingService {
	mock := &MockVINDecodingService{ctrl: ctrl}
	mock.recorder = &MockVINDecodingServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVINDecodingService) EXPECT() *MockVINDecodingServiceMockRecorder {
	return m.recorder
}

// GetVIN mocks base method.
func (m *MockVINDecodingService) GetVIN(ctx context.Context, vin string, dt *models0.DeviceType, provider models.DecodeProviderEnum, country string) (*models.VINDecodingInfoData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVIN", ctx, vin, dt, provider, country)
	ret0, _ := ret[0].(*models.VINDecodingInfoData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVIN indicates an expected call of GetVIN.
func (mr *MockVINDecodingServiceMockRecorder) GetVIN(ctx, vin, dt, provider, country any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVIN", reflect.TypeOf((*MockVINDecodingService)(nil).GetVIN), ctx, vin, dt, provider, country)
}
