// Code generated by SQLBoiler 4.14.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// DeviceNhtsaRecall is an object representing the database table.
type DeviceNhtsaRecall struct {
	ID                 string      `boil:"id" json:"id" toml:"id" yaml:"id"`
	DeviceDefinitionID null.String `boil:"device_definition_id" json:"device_definition_id,omitempty" toml:"device_definition_id" yaml:"device_definition_id,omitempty"`
	// 1. RUNNING SEQUENCE NUMBER, WHICH UNIQUELY IDENTIFIES THE RECORD
	DataRecordID int `boil:"data_record_id" json:"data_record_id" toml:"data_record_id" yaml:"data_record_id"`
	// 2. NHTSA CAMPAIGN NUMBER
	DataCampno string `boil:"data_campno" json:"data_campno" toml:"data_campno" yaml:"data_campno"`
	// 3. VEHICLE/EQUIPMENT MAKE
	DataMaketxt string `boil:"data_maketxt" json:"data_maketxt" toml:"data_maketxt" yaml:"data_maketxt"`
	// 4. VEHICLE/EQUIPMENT MODEL
	DataModeltxt string `boil:"data_modeltxt" json:"data_modeltxt" toml:"data_modeltxt" yaml:"data_modeltxt"`
	// 5. MODEL YEAR, 9999 IF UNKNOWN or N/A
	DataYeartxt int `boil:"data_yeartxt" json:"data_yeartxt" toml:"data_yeartxt" yaml:"data_yeartxt"`
	// 6. MFR CAMPAIGN NUMBER
	DataMfgcampno string `boil:"data_mfgcampno" json:"data_mfgcampno" toml:"data_mfgcampno" yaml:"data_mfgcampno"`
	// 7. COMPONENT DESCRIPTION
	DataCompname string `boil:"data_compname" json:"data_compname" toml:"data_compname" yaml:"data_compname"`
	// 8. MANUFACTURER THAT FILED DEFECT/NONCOMPLIANCE REPORT
	DataMfgname string `boil:"data_mfgname" json:"data_mfgname" toml:"data_mfgname" yaml:"data_mfgname"`
	// 9. BEGIN DATE OF MANUFACTURING
	DataBgman null.Time `boil:"data_bgman" json:"data_bgman,omitempty" toml:"data_bgman" yaml:"data_bgman,omitempty"`
	// 10. END DATE OF MANUFACTURING
	DataEndman null.Time `boil:"data_endman" json:"data_endman,omitempty" toml:"data_endman" yaml:"data_endman,omitempty"`
	// 11. VEHICLE, EQUIPMENT OR TIRE REPORT
	DataRcltypecd string `boil:"data_rcltypecd" json:"data_rcltypecd" toml:"data_rcltypecd" yaml:"data_rcltypecd"`
	// 12. POTENTIAL NUMBER OF UNITS AFFECTED
	DataPotaff null.Int `boil:"data_potaff" json:"data_potaff,omitempty" toml:"data_potaff" yaml:"data_potaff,omitempty"`
	// 13. DATE OWNER NOTIFIED BY MFR
	DataOdate null.Time `boil:"data_odate" json:"data_odate,omitempty" toml:"data_odate" yaml:"data_odate,omitempty"`
	// 14. RECALL INITIATOR (MFR/OVSC/ODI)
	DataInfluencedBy string `boil:"data_influenced_by" json:"data_influenced_by" toml:"data_influenced_by" yaml:"data_influenced_by"`
	// 15. MANUFACTURERS OF RECALLED VEHICLES/PRODUCTS
	DataMFGTXT string `boil:"data_mfgtxt" json:"data_mfgtxt" toml:"data_mfgtxt" yaml:"data_mfgtxt"`
	// 16. REPORT RECEIVED DATE
	DataRcdate time.Time `boil:"data_rcdate" json:"data_rcdate" toml:"data_rcdate" yaml:"data_rcdate"`
	// 17. RECORD CREATION DATE
	DataDatea time.Time `boil:"data_datea" json:"data_datea" toml:"data_datea" yaml:"data_datea"`
	// 18. REGULATION PART NUMBER
	DataRpno string `boil:"data_rpno" json:"data_rpno" toml:"data_rpno" yaml:"data_rpno"`
	// 19. FEDERAL MOTOR VEHICLE SAFETY STANDARD NUMBER
	DataFMVSS string `boil:"data_fmvss" json:"data_fmvss" toml:"data_fmvss" yaml:"data_fmvss"`
	// 20. DEFECT SUMMARY
	DataDescDefect string `boil:"data_desc_defect" json:"data_desc_defect" toml:"data_desc_defect" yaml:"data_desc_defect"`
	// 21. CONSEQUENCE SUMMARY
	DataConequenceDefect string `boil:"data_conequence_defect" json:"data_conequence_defect" toml:"data_conequence_defect" yaml:"data_conequence_defect"`
	// 22. CORRECTIVE SUMMARY
	DataCorrectiveAction string `boil:"data_corrective_action" json:"data_corrective_action" toml:"data_corrective_action" yaml:"data_corrective_action"`
	// 23. RECALL NOTES
	DataNotes string `boil:"data_notes" json:"data_notes" toml:"data_notes" yaml:"data_notes"`
	// 24. NUMBER THAT UNIQUELY IDENTIFIES A RECALLED COMPONENT
	DataRCLCMPTID string `boil:"data_rcl_cmpt_id" json:"data_rcl_cmpt_id" toml:"data_rcl_cmpt_id" yaml:"data_rcl_cmpt_id"`
	// 25. MANUFACTURER-SUPPLIED COMPONENT NAME
	DataMFRCompName string `boil:"data_mfr_comp_name" json:"data_mfr_comp_name" toml:"data_mfr_comp_name" yaml:"data_mfr_comp_name"`
	// 26. MANUFACTURER-SUPPLIED COMPONENT DESCRIPTION
	DataMFRCompDesc string `boil:"data_mfr_comp_desc" json:"data_mfr_comp_desc" toml:"data_mfr_comp_desc" yaml:"data_mfr_comp_desc"`
	// 27. MANUFACTURER-SUPPLIED COMPONENT PART NUMBER
	DataMFRCompPtno string    `boil:"data_mfr_comp_ptno" json:"data_mfr_comp_ptno" toml:"data_mfr_comp_ptno" yaml:"data_mfr_comp_ptno"`
	CreatedAt       time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt       time.Time `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	Metadata        null.JSON `boil:"metadata" json:"metadata,omitempty" toml:"metadata" yaml:"metadata,omitempty"`
	// A SHA1 hash of the entire row from the data file
	Hash []byte `boil:"hash" json:"hash" toml:"hash" yaml:"hash"`

	R *deviceNhtsaRecallR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L deviceNhtsaRecallL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var DeviceNhtsaRecallColumns = struct {
	ID                   string
	DeviceDefinitionID   string
	DataRecordID         string
	DataCampno           string
	DataMaketxt          string
	DataModeltxt         string
	DataYeartxt          string
	DataMfgcampno        string
	DataCompname         string
	DataMfgname          string
	DataBgman            string
	DataEndman           string
	DataRcltypecd        string
	DataPotaff           string
	DataOdate            string
	DataInfluencedBy     string
	DataMFGTXT           string
	DataRcdate           string
	DataDatea            string
	DataRpno             string
	DataFMVSS            string
	DataDescDefect       string
	DataConequenceDefect string
	DataCorrectiveAction string
	DataNotes            string
	DataRCLCMPTID        string
	DataMFRCompName      string
	DataMFRCompDesc      string
	DataMFRCompPtno      string
	CreatedAt            string
	UpdatedAt            string
	Metadata             string
	Hash                 string
}{
	ID:                   "id",
	DeviceDefinitionID:   "device_definition_id",
	DataRecordID:         "data_record_id",
	DataCampno:           "data_campno",
	DataMaketxt:          "data_maketxt",
	DataModeltxt:         "data_modeltxt",
	DataYeartxt:          "data_yeartxt",
	DataMfgcampno:        "data_mfgcampno",
	DataCompname:         "data_compname",
	DataMfgname:          "data_mfgname",
	DataBgman:            "data_bgman",
	DataEndman:           "data_endman",
	DataRcltypecd:        "data_rcltypecd",
	DataPotaff:           "data_potaff",
	DataOdate:            "data_odate",
	DataInfluencedBy:     "data_influenced_by",
	DataMFGTXT:           "data_mfgtxt",
	DataRcdate:           "data_rcdate",
	DataDatea:            "data_datea",
	DataRpno:             "data_rpno",
	DataFMVSS:            "data_fmvss",
	DataDescDefect:       "data_desc_defect",
	DataConequenceDefect: "data_conequence_defect",
	DataCorrectiveAction: "data_corrective_action",
	DataNotes:            "data_notes",
	DataRCLCMPTID:        "data_rcl_cmpt_id",
	DataMFRCompName:      "data_mfr_comp_name",
	DataMFRCompDesc:      "data_mfr_comp_desc",
	DataMFRCompPtno:      "data_mfr_comp_ptno",
	CreatedAt:            "created_at",
	UpdatedAt:            "updated_at",
	Metadata:             "metadata",
	Hash:                 "hash",
}

var DeviceNhtsaRecallTableColumns = struct {
	ID                   string
	DeviceDefinitionID   string
	DataRecordID         string
	DataCampno           string
	DataMaketxt          string
	DataModeltxt         string
	DataYeartxt          string
	DataMfgcampno        string
	DataCompname         string
	DataMfgname          string
	DataBgman            string
	DataEndman           string
	DataRcltypecd        string
	DataPotaff           string
	DataOdate            string
	DataInfluencedBy     string
	DataMFGTXT           string
	DataRcdate           string
	DataDatea            string
	DataRpno             string
	DataFMVSS            string
	DataDescDefect       string
	DataConequenceDefect string
	DataCorrectiveAction string
	DataNotes            string
	DataRCLCMPTID        string
	DataMFRCompName      string
	DataMFRCompDesc      string
	DataMFRCompPtno      string
	CreatedAt            string
	UpdatedAt            string
	Metadata             string
	Hash                 string
}{
	ID:                   "device_nhtsa_recalls.id",
	DeviceDefinitionID:   "device_nhtsa_recalls.device_definition_id",
	DataRecordID:         "device_nhtsa_recalls.data_record_id",
	DataCampno:           "device_nhtsa_recalls.data_campno",
	DataMaketxt:          "device_nhtsa_recalls.data_maketxt",
	DataModeltxt:         "device_nhtsa_recalls.data_modeltxt",
	DataYeartxt:          "device_nhtsa_recalls.data_yeartxt",
	DataMfgcampno:        "device_nhtsa_recalls.data_mfgcampno",
	DataCompname:         "device_nhtsa_recalls.data_compname",
	DataMfgname:          "device_nhtsa_recalls.data_mfgname",
	DataBgman:            "device_nhtsa_recalls.data_bgman",
	DataEndman:           "device_nhtsa_recalls.data_endman",
	DataRcltypecd:        "device_nhtsa_recalls.data_rcltypecd",
	DataPotaff:           "device_nhtsa_recalls.data_potaff",
	DataOdate:            "device_nhtsa_recalls.data_odate",
	DataInfluencedBy:     "device_nhtsa_recalls.data_influenced_by",
	DataMFGTXT:           "device_nhtsa_recalls.data_mfgtxt",
	DataRcdate:           "device_nhtsa_recalls.data_rcdate",
	DataDatea:            "device_nhtsa_recalls.data_datea",
	DataRpno:             "device_nhtsa_recalls.data_rpno",
	DataFMVSS:            "device_nhtsa_recalls.data_fmvss",
	DataDescDefect:       "device_nhtsa_recalls.data_desc_defect",
	DataConequenceDefect: "device_nhtsa_recalls.data_conequence_defect",
	DataCorrectiveAction: "device_nhtsa_recalls.data_corrective_action",
	DataNotes:            "device_nhtsa_recalls.data_notes",
	DataRCLCMPTID:        "device_nhtsa_recalls.data_rcl_cmpt_id",
	DataMFRCompName:      "device_nhtsa_recalls.data_mfr_comp_name",
	DataMFRCompDesc:      "device_nhtsa_recalls.data_mfr_comp_desc",
	DataMFRCompPtno:      "device_nhtsa_recalls.data_mfr_comp_ptno",
	CreatedAt:            "device_nhtsa_recalls.created_at",
	UpdatedAt:            "device_nhtsa_recalls.updated_at",
	Metadata:             "device_nhtsa_recalls.metadata",
	Hash:                 "device_nhtsa_recalls.hash",
}

// Generated where

type whereHelperint struct{ field string }

func (w whereHelperint) EQ(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperint) NEQ(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperint) LT(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperint) LTE(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperint) GT(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperint) GTE(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperint) IN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperint) NIN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelpernull_Time struct{ field string }

func (w whereHelpernull_Time) EQ(x null.Time) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Time) NEQ(x null.Time) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Time) LT(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Time) LTE(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Time) GT(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Time) GTE(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

func (w whereHelpernull_Time) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Time) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

type whereHelpernull_Int struct{ field string }

func (w whereHelpernull_Int) EQ(x null.Int) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Int) NEQ(x null.Int) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Int) LT(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Int) LTE(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Int) GT(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Int) GTE(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelpernull_Int) IN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelpernull_Int) NIN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

func (w whereHelpernull_Int) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Int) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

type whereHelper__byte struct{ field string }

func (w whereHelper__byte) EQ(x []byte) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelper__byte) NEQ(x []byte) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelper__byte) LT(x []byte) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelper__byte) LTE(x []byte) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelper__byte) GT(x []byte) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelper__byte) GTE(x []byte) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }

var DeviceNhtsaRecallWhere = struct {
	ID                   whereHelperstring
	DeviceDefinitionID   whereHelpernull_String
	DataRecordID         whereHelperint
	DataCampno           whereHelperstring
	DataMaketxt          whereHelperstring
	DataModeltxt         whereHelperstring
	DataYeartxt          whereHelperint
	DataMfgcampno        whereHelperstring
	DataCompname         whereHelperstring
	DataMfgname          whereHelperstring
	DataBgman            whereHelpernull_Time
	DataEndman           whereHelpernull_Time
	DataRcltypecd        whereHelperstring
	DataPotaff           whereHelpernull_Int
	DataOdate            whereHelpernull_Time
	DataInfluencedBy     whereHelperstring
	DataMFGTXT           whereHelperstring
	DataRcdate           whereHelpertime_Time
	DataDatea            whereHelpertime_Time
	DataRpno             whereHelperstring
	DataFMVSS            whereHelperstring
	DataDescDefect       whereHelperstring
	DataConequenceDefect whereHelperstring
	DataCorrectiveAction whereHelperstring
	DataNotes            whereHelperstring
	DataRCLCMPTID        whereHelperstring
	DataMFRCompName      whereHelperstring
	DataMFRCompDesc      whereHelperstring
	DataMFRCompPtno      whereHelperstring
	CreatedAt            whereHelpertime_Time
	UpdatedAt            whereHelpertime_Time
	Metadata             whereHelpernull_JSON
	Hash                 whereHelper__byte
}{
	ID:                   whereHelperstring{field: "\"device_definitions_api\".\"device_nhtsa_recalls\".\"id\""},
	DeviceDefinitionID:   whereHelpernull_String{field: "\"device_definitions_api\".\"device_nhtsa_recalls\".\"device_definition_id\""},
	DataRecordID:         whereHelperint{field: "\"device_definitions_api\".\"device_nhtsa_recalls\".\"data_record_id\""},
	DataCampno:           whereHelperstring{field: "\"device_definitions_api\".\"device_nhtsa_recalls\".\"data_campno\""},
	DataMaketxt:          whereHelperstring{field: "\"device_definitions_api\".\"device_nhtsa_recalls\".\"data_maketxt\""},
	DataModeltxt:         whereHelperstring{field: "\"device_definitions_api\".\"device_nhtsa_recalls\".\"data_modeltxt\""},
	DataYeartxt:          whereHelperint{field: "\"device_definitions_api\".\"device_nhtsa_recalls\".\"data_yeartxt\""},
	DataMfgcampno:        whereHelperstring{field: "\"device_definitions_api\".\"device_nhtsa_recalls\".\"data_mfgcampno\""},
	DataCompname:         whereHelperstring{field: "\"device_definitions_api\".\"device_nhtsa_recalls\".\"data_compname\""},
	DataMfgname:          whereHelperstring{field: "\"device_definitions_api\".\"device_nhtsa_recalls\".\"data_mfgname\""},
	DataBgman:            whereHelpernull_Time{field: "\"device_definitions_api\".\"device_nhtsa_recalls\".\"data_bgman\""},
	DataEndman:           whereHelpernull_Time{field: "\"device_definitions_api\".\"device_nhtsa_recalls\".\"data_endman\""},
	DataRcltypecd:        whereHelperstring{field: "\"device_definitions_api\".\"device_nhtsa_recalls\".\"data_rcltypecd\""},
	DataPotaff:           whereHelpernull_Int{field: "\"device_definitions_api\".\"device_nhtsa_recalls\".\"data_potaff\""},
	DataOdate:            whereHelpernull_Time{field: "\"device_definitions_api\".\"device_nhtsa_recalls\".\"data_odate\""},
	DataInfluencedBy:     whereHelperstring{field: "\"device_definitions_api\".\"device_nhtsa_recalls\".\"data_influenced_by\""},
	DataMFGTXT:           whereHelperstring{field: "\"device_definitions_api\".\"device_nhtsa_recalls\".\"data_mfgtxt\""},
	DataRcdate:           whereHelpertime_Time{field: "\"device_definitions_api\".\"device_nhtsa_recalls\".\"data_rcdate\""},
	DataDatea:            whereHelpertime_Time{field: "\"device_definitions_api\".\"device_nhtsa_recalls\".\"data_datea\""},
	DataRpno:             whereHelperstring{field: "\"device_definitions_api\".\"device_nhtsa_recalls\".\"data_rpno\""},
	DataFMVSS:            whereHelperstring{field: "\"device_definitions_api\".\"device_nhtsa_recalls\".\"data_fmvss\""},
	DataDescDefect:       whereHelperstring{field: "\"device_definitions_api\".\"device_nhtsa_recalls\".\"data_desc_defect\""},
	DataConequenceDefect: whereHelperstring{field: "\"device_definitions_api\".\"device_nhtsa_recalls\".\"data_conequence_defect\""},
	DataCorrectiveAction: whereHelperstring{field: "\"device_definitions_api\".\"device_nhtsa_recalls\".\"data_corrective_action\""},
	DataNotes:            whereHelperstring{field: "\"device_definitions_api\".\"device_nhtsa_recalls\".\"data_notes\""},
	DataRCLCMPTID:        whereHelperstring{field: "\"device_definitions_api\".\"device_nhtsa_recalls\".\"data_rcl_cmpt_id\""},
	DataMFRCompName:      whereHelperstring{field: "\"device_definitions_api\".\"device_nhtsa_recalls\".\"data_mfr_comp_name\""},
	DataMFRCompDesc:      whereHelperstring{field: "\"device_definitions_api\".\"device_nhtsa_recalls\".\"data_mfr_comp_desc\""},
	DataMFRCompPtno:      whereHelperstring{field: "\"device_definitions_api\".\"device_nhtsa_recalls\".\"data_mfr_comp_ptno\""},
	CreatedAt:            whereHelpertime_Time{field: "\"device_definitions_api\".\"device_nhtsa_recalls\".\"created_at\""},
	UpdatedAt:            whereHelpertime_Time{field: "\"device_definitions_api\".\"device_nhtsa_recalls\".\"updated_at\""},
	Metadata:             whereHelpernull_JSON{field: "\"device_definitions_api\".\"device_nhtsa_recalls\".\"metadata\""},
	Hash:                 whereHelper__byte{field: "\"device_definitions_api\".\"device_nhtsa_recalls\".\"hash\""},
}

// DeviceNhtsaRecallRels is where relationship names are stored.
var DeviceNhtsaRecallRels = struct {
	DeviceDefinition string
}{
	DeviceDefinition: "DeviceDefinition",
}

// deviceNhtsaRecallR is where relationships are stored.
type deviceNhtsaRecallR struct {
	DeviceDefinition *DeviceDefinition `boil:"DeviceDefinition" json:"DeviceDefinition" toml:"DeviceDefinition" yaml:"DeviceDefinition"`
}

// NewStruct creates a new relationship struct
func (*deviceNhtsaRecallR) NewStruct() *deviceNhtsaRecallR {
	return &deviceNhtsaRecallR{}
}

func (r *deviceNhtsaRecallR) GetDeviceDefinition() *DeviceDefinition {
	if r == nil {
		return nil
	}
	return r.DeviceDefinition
}

// deviceNhtsaRecallL is where Load methods for each relationship are stored.
type deviceNhtsaRecallL struct{}

var (
	deviceNhtsaRecallAllColumns            = []string{"id", "device_definition_id", "data_record_id", "data_campno", "data_maketxt", "data_modeltxt", "data_yeartxt", "data_mfgcampno", "data_compname", "data_mfgname", "data_bgman", "data_endman", "data_rcltypecd", "data_potaff", "data_odate", "data_influenced_by", "data_mfgtxt", "data_rcdate", "data_datea", "data_rpno", "data_fmvss", "data_desc_defect", "data_conequence_defect", "data_corrective_action", "data_notes", "data_rcl_cmpt_id", "data_mfr_comp_name", "data_mfr_comp_desc", "data_mfr_comp_ptno", "created_at", "updated_at", "metadata", "hash"}
	deviceNhtsaRecallColumnsWithoutDefault = []string{"id", "data_record_id", "data_campno", "data_maketxt", "data_modeltxt", "data_yeartxt", "data_mfgcampno", "data_compname", "data_mfgname", "data_rcltypecd", "data_influenced_by", "data_mfgtxt", "data_rcdate", "data_datea", "data_rpno", "data_fmvss", "data_desc_defect", "data_conequence_defect", "data_corrective_action", "data_notes", "data_rcl_cmpt_id", "data_mfr_comp_name", "data_mfr_comp_desc", "data_mfr_comp_ptno", "hash"}
	deviceNhtsaRecallColumnsWithDefault    = []string{"device_definition_id", "data_bgman", "data_endman", "data_potaff", "data_odate", "created_at", "updated_at", "metadata"}
	deviceNhtsaRecallPrimaryKeyColumns     = []string{"id"}
	deviceNhtsaRecallGeneratedColumns      = []string{}
)

type (
	// DeviceNhtsaRecallSlice is an alias for a slice of pointers to DeviceNhtsaRecall.
	// This should almost always be used instead of []DeviceNhtsaRecall.
	DeviceNhtsaRecallSlice []*DeviceNhtsaRecall
	// DeviceNhtsaRecallHook is the signature for custom DeviceNhtsaRecall hook methods
	DeviceNhtsaRecallHook func(context.Context, boil.ContextExecutor, *DeviceNhtsaRecall) error

	deviceNhtsaRecallQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	deviceNhtsaRecallType                 = reflect.TypeOf(&DeviceNhtsaRecall{})
	deviceNhtsaRecallMapping              = queries.MakeStructMapping(deviceNhtsaRecallType)
	deviceNhtsaRecallPrimaryKeyMapping, _ = queries.BindMapping(deviceNhtsaRecallType, deviceNhtsaRecallMapping, deviceNhtsaRecallPrimaryKeyColumns)
	deviceNhtsaRecallInsertCacheMut       sync.RWMutex
	deviceNhtsaRecallInsertCache          = make(map[string]insertCache)
	deviceNhtsaRecallUpdateCacheMut       sync.RWMutex
	deviceNhtsaRecallUpdateCache          = make(map[string]updateCache)
	deviceNhtsaRecallUpsertCacheMut       sync.RWMutex
	deviceNhtsaRecallUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var deviceNhtsaRecallAfterSelectHooks []DeviceNhtsaRecallHook

var deviceNhtsaRecallBeforeInsertHooks []DeviceNhtsaRecallHook
var deviceNhtsaRecallAfterInsertHooks []DeviceNhtsaRecallHook

var deviceNhtsaRecallBeforeUpdateHooks []DeviceNhtsaRecallHook
var deviceNhtsaRecallAfterUpdateHooks []DeviceNhtsaRecallHook

var deviceNhtsaRecallBeforeDeleteHooks []DeviceNhtsaRecallHook
var deviceNhtsaRecallAfterDeleteHooks []DeviceNhtsaRecallHook

var deviceNhtsaRecallBeforeUpsertHooks []DeviceNhtsaRecallHook
var deviceNhtsaRecallAfterUpsertHooks []DeviceNhtsaRecallHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *DeviceNhtsaRecall) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range deviceNhtsaRecallAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *DeviceNhtsaRecall) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range deviceNhtsaRecallBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *DeviceNhtsaRecall) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range deviceNhtsaRecallAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *DeviceNhtsaRecall) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range deviceNhtsaRecallBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *DeviceNhtsaRecall) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range deviceNhtsaRecallAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *DeviceNhtsaRecall) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range deviceNhtsaRecallBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *DeviceNhtsaRecall) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range deviceNhtsaRecallAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *DeviceNhtsaRecall) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range deviceNhtsaRecallBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *DeviceNhtsaRecall) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range deviceNhtsaRecallAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddDeviceNhtsaRecallHook registers your hook function for all future operations.
func AddDeviceNhtsaRecallHook(hookPoint boil.HookPoint, deviceNhtsaRecallHook DeviceNhtsaRecallHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		deviceNhtsaRecallAfterSelectHooks = append(deviceNhtsaRecallAfterSelectHooks, deviceNhtsaRecallHook)
	case boil.BeforeInsertHook:
		deviceNhtsaRecallBeforeInsertHooks = append(deviceNhtsaRecallBeforeInsertHooks, deviceNhtsaRecallHook)
	case boil.AfterInsertHook:
		deviceNhtsaRecallAfterInsertHooks = append(deviceNhtsaRecallAfterInsertHooks, deviceNhtsaRecallHook)
	case boil.BeforeUpdateHook:
		deviceNhtsaRecallBeforeUpdateHooks = append(deviceNhtsaRecallBeforeUpdateHooks, deviceNhtsaRecallHook)
	case boil.AfterUpdateHook:
		deviceNhtsaRecallAfterUpdateHooks = append(deviceNhtsaRecallAfterUpdateHooks, deviceNhtsaRecallHook)
	case boil.BeforeDeleteHook:
		deviceNhtsaRecallBeforeDeleteHooks = append(deviceNhtsaRecallBeforeDeleteHooks, deviceNhtsaRecallHook)
	case boil.AfterDeleteHook:
		deviceNhtsaRecallAfterDeleteHooks = append(deviceNhtsaRecallAfterDeleteHooks, deviceNhtsaRecallHook)
	case boil.BeforeUpsertHook:
		deviceNhtsaRecallBeforeUpsertHooks = append(deviceNhtsaRecallBeforeUpsertHooks, deviceNhtsaRecallHook)
	case boil.AfterUpsertHook:
		deviceNhtsaRecallAfterUpsertHooks = append(deviceNhtsaRecallAfterUpsertHooks, deviceNhtsaRecallHook)
	}
}

// One returns a single deviceNhtsaRecall record from the query.
func (q deviceNhtsaRecallQuery) One(ctx context.Context, exec boil.ContextExecutor) (*DeviceNhtsaRecall, error) {
	o := &DeviceNhtsaRecall{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for device_nhtsa_recalls")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all DeviceNhtsaRecall records from the query.
func (q deviceNhtsaRecallQuery) All(ctx context.Context, exec boil.ContextExecutor) (DeviceNhtsaRecallSlice, error) {
	var o []*DeviceNhtsaRecall

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to DeviceNhtsaRecall slice")
	}

	if len(deviceNhtsaRecallAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all DeviceNhtsaRecall records in the query.
func (q deviceNhtsaRecallQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count device_nhtsa_recalls rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q deviceNhtsaRecallQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if device_nhtsa_recalls exists")
	}

	return count > 0, nil
}

// DeviceDefinition pointed to by the foreign key.
func (o *DeviceNhtsaRecall) DeviceDefinition(mods ...qm.QueryMod) deviceDefinitionQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.DeviceDefinitionID),
	}

	queryMods = append(queryMods, mods...)

	return DeviceDefinitions(queryMods...)
}

// LoadDeviceDefinition allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (deviceNhtsaRecallL) LoadDeviceDefinition(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDeviceNhtsaRecall interface{}, mods queries.Applicator) error {
	var slice []*DeviceNhtsaRecall
	var object *DeviceNhtsaRecall

	if singular {
		var ok bool
		object, ok = maybeDeviceNhtsaRecall.(*DeviceNhtsaRecall)
		if !ok {
			object = new(DeviceNhtsaRecall)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDeviceNhtsaRecall)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDeviceNhtsaRecall))
			}
		}
	} else {
		s, ok := maybeDeviceNhtsaRecall.(*[]*DeviceNhtsaRecall)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDeviceNhtsaRecall)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDeviceNhtsaRecall))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &deviceNhtsaRecallR{}
		}
		if !queries.IsNil(object.DeviceDefinitionID) {
			args = append(args, object.DeviceDefinitionID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &deviceNhtsaRecallR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.DeviceDefinitionID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.DeviceDefinitionID) {
				args = append(args, obj.DeviceDefinitionID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`device_definitions_api.device_definitions`),
		qm.WhereIn(`device_definitions_api.device_definitions.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DeviceDefinition")
	}

	var resultSlice []*DeviceDefinition
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DeviceDefinition")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for device_definitions")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for device_definitions")
	}

	if len(deviceDefinitionAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.DeviceDefinition = foreign
		if foreign.R == nil {
			foreign.R = &deviceDefinitionR{}
		}
		foreign.R.DeviceNhtsaRecalls = append(foreign.R.DeviceNhtsaRecalls, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.DeviceDefinitionID, foreign.ID) {
				local.R.DeviceDefinition = foreign
				if foreign.R == nil {
					foreign.R = &deviceDefinitionR{}
				}
				foreign.R.DeviceNhtsaRecalls = append(foreign.R.DeviceNhtsaRecalls, local)
				break
			}
		}
	}

	return nil
}

// SetDeviceDefinition of the deviceNhtsaRecall to the related item.
// Sets o.R.DeviceDefinition to related.
// Adds o to related.R.DeviceNhtsaRecalls.
func (o *DeviceNhtsaRecall) SetDeviceDefinition(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DeviceDefinition) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"device_definitions_api\".\"device_nhtsa_recalls\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"device_definition_id"}),
		strmangle.WhereClause("\"", "\"", 2, deviceNhtsaRecallPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.DeviceDefinitionID, related.ID)
	if o.R == nil {
		o.R = &deviceNhtsaRecallR{
			DeviceDefinition: related,
		}
	} else {
		o.R.DeviceDefinition = related
	}

	if related.R == nil {
		related.R = &deviceDefinitionR{
			DeviceNhtsaRecalls: DeviceNhtsaRecallSlice{o},
		}
	} else {
		related.R.DeviceNhtsaRecalls = append(related.R.DeviceNhtsaRecalls, o)
	}

	return nil
}

// RemoveDeviceDefinition relationship.
// Sets o.R.DeviceDefinition to nil.
// Removes o from all passed in related items' relationships struct.
func (o *DeviceNhtsaRecall) RemoveDeviceDefinition(ctx context.Context, exec boil.ContextExecutor, related *DeviceDefinition) error {
	var err error

	queries.SetScanner(&o.DeviceDefinitionID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("device_definition_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.DeviceDefinition = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.DeviceNhtsaRecalls {
		if queries.Equal(o.DeviceDefinitionID, ri.DeviceDefinitionID) {
			continue
		}

		ln := len(related.R.DeviceNhtsaRecalls)
		if ln > 1 && i < ln-1 {
			related.R.DeviceNhtsaRecalls[i] = related.R.DeviceNhtsaRecalls[ln-1]
		}
		related.R.DeviceNhtsaRecalls = related.R.DeviceNhtsaRecalls[:ln-1]
		break
	}
	return nil
}

// DeviceNhtsaRecalls retrieves all the records using an executor.
func DeviceNhtsaRecalls(mods ...qm.QueryMod) deviceNhtsaRecallQuery {
	mods = append(mods, qm.From("\"device_definitions_api\".\"device_nhtsa_recalls\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"device_definitions_api\".\"device_nhtsa_recalls\".*"})
	}

	return deviceNhtsaRecallQuery{q}
}

// FindDeviceNhtsaRecall retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindDeviceNhtsaRecall(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*DeviceNhtsaRecall, error) {
	deviceNhtsaRecallObj := &DeviceNhtsaRecall{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"device_definitions_api\".\"device_nhtsa_recalls\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, deviceNhtsaRecallObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from device_nhtsa_recalls")
	}

	if err = deviceNhtsaRecallObj.doAfterSelectHooks(ctx, exec); err != nil {
		return deviceNhtsaRecallObj, err
	}

	return deviceNhtsaRecallObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *DeviceNhtsaRecall) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no device_nhtsa_recalls provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(deviceNhtsaRecallColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	deviceNhtsaRecallInsertCacheMut.RLock()
	cache, cached := deviceNhtsaRecallInsertCache[key]
	deviceNhtsaRecallInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			deviceNhtsaRecallAllColumns,
			deviceNhtsaRecallColumnsWithDefault,
			deviceNhtsaRecallColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(deviceNhtsaRecallType, deviceNhtsaRecallMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(deviceNhtsaRecallType, deviceNhtsaRecallMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"device_definitions_api\".\"device_nhtsa_recalls\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"device_definitions_api\".\"device_nhtsa_recalls\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into device_nhtsa_recalls")
	}

	if !cached {
		deviceNhtsaRecallInsertCacheMut.Lock()
		deviceNhtsaRecallInsertCache[key] = cache
		deviceNhtsaRecallInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the DeviceNhtsaRecall.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *DeviceNhtsaRecall) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	deviceNhtsaRecallUpdateCacheMut.RLock()
	cache, cached := deviceNhtsaRecallUpdateCache[key]
	deviceNhtsaRecallUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			deviceNhtsaRecallAllColumns,
			deviceNhtsaRecallPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update device_nhtsa_recalls, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"device_definitions_api\".\"device_nhtsa_recalls\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, deviceNhtsaRecallPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(deviceNhtsaRecallType, deviceNhtsaRecallMapping, append(wl, deviceNhtsaRecallPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update device_nhtsa_recalls row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for device_nhtsa_recalls")
	}

	if !cached {
		deviceNhtsaRecallUpdateCacheMut.Lock()
		deviceNhtsaRecallUpdateCache[key] = cache
		deviceNhtsaRecallUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q deviceNhtsaRecallQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for device_nhtsa_recalls")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for device_nhtsa_recalls")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o DeviceNhtsaRecallSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), deviceNhtsaRecallPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"device_definitions_api\".\"device_nhtsa_recalls\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, deviceNhtsaRecallPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in deviceNhtsaRecall slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all deviceNhtsaRecall")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *DeviceNhtsaRecall) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no device_nhtsa_recalls provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(deviceNhtsaRecallColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	deviceNhtsaRecallUpsertCacheMut.RLock()
	cache, cached := deviceNhtsaRecallUpsertCache[key]
	deviceNhtsaRecallUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			deviceNhtsaRecallAllColumns,
			deviceNhtsaRecallColumnsWithDefault,
			deviceNhtsaRecallColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			deviceNhtsaRecallAllColumns,
			deviceNhtsaRecallPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert device_nhtsa_recalls, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(deviceNhtsaRecallPrimaryKeyColumns))
			copy(conflict, deviceNhtsaRecallPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"device_definitions_api\".\"device_nhtsa_recalls\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(deviceNhtsaRecallType, deviceNhtsaRecallMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(deviceNhtsaRecallType, deviceNhtsaRecallMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert device_nhtsa_recalls")
	}

	if !cached {
		deviceNhtsaRecallUpsertCacheMut.Lock()
		deviceNhtsaRecallUpsertCache[key] = cache
		deviceNhtsaRecallUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single DeviceNhtsaRecall record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *DeviceNhtsaRecall) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no DeviceNhtsaRecall provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), deviceNhtsaRecallPrimaryKeyMapping)
	sql := "DELETE FROM \"device_definitions_api\".\"device_nhtsa_recalls\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from device_nhtsa_recalls")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for device_nhtsa_recalls")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q deviceNhtsaRecallQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no deviceNhtsaRecallQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from device_nhtsa_recalls")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for device_nhtsa_recalls")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o DeviceNhtsaRecallSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(deviceNhtsaRecallBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), deviceNhtsaRecallPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"device_definitions_api\".\"device_nhtsa_recalls\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, deviceNhtsaRecallPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from deviceNhtsaRecall slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for device_nhtsa_recalls")
	}

	if len(deviceNhtsaRecallAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *DeviceNhtsaRecall) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindDeviceNhtsaRecall(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *DeviceNhtsaRecallSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := DeviceNhtsaRecallSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), deviceNhtsaRecallPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"device_definitions_api\".\"device_nhtsa_recalls\".* FROM \"device_definitions_api\".\"device_nhtsa_recalls\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, deviceNhtsaRecallPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in DeviceNhtsaRecallSlice")
	}

	*o = slice

	return nil
}

// DeviceNhtsaRecallExists checks if the DeviceNhtsaRecall row exists.
func DeviceNhtsaRecallExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"device_definitions_api\".\"device_nhtsa_recalls\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if device_nhtsa_recalls exists")
	}

	return exists, nil
}

// Exists checks if the DeviceNhtsaRecall row exists.
func (o *DeviceNhtsaRecall) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return DeviceNhtsaRecallExists(ctx, exec, o.ID)
}
