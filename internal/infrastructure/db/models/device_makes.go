// Code generated by SQLBoiler 4.13.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/v4/types"
	"github.com/volatiletech/strmangle"
)

// DeviceMake is an object representing the database table.
type DeviceMake struct {
	ID              string            `boil:"id" json:"id" toml:"id" yaml:"id"`
	Name            string            `boil:"name" json:"name" toml:"name" yaml:"name"`
	ExternalIds     null.JSON         `boil:"external_ids" json:"external_ids,omitempty" toml:"external_ids" yaml:"external_ids,omitempty"`
	CreatedAt       time.Time         `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt       time.Time         `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	TokenID         types.NullDecimal `boil:"token_id" json:"token_id,omitempty" toml:"token_id" yaml:"token_id,omitempty"`
	LogoURL         null.String       `boil:"logo_url" json:"logo_url,omitempty" toml:"logo_url" yaml:"logo_url,omitempty"`
	OemPlatformName null.String       `boil:"oem_platform_name" json:"oem_platform_name,omitempty" toml:"oem_platform_name" yaml:"oem_platform_name,omitempty"`
	NameSlug        string            `boil:"name_slug" json:"name_slug" toml:"name_slug" yaml:"name_slug"`
	Metadata        null.JSON         `boil:"metadata" json:"metadata,omitempty" toml:"metadata" yaml:"metadata,omitempty"`

	R *deviceMakeR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L deviceMakeL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var DeviceMakeColumns = struct {
	ID              string
	Name            string
	ExternalIds     string
	CreatedAt       string
	UpdatedAt       string
	TokenID         string
	LogoURL         string
	OemPlatformName string
	NameSlug        string
	Metadata        string
}{
	ID:              "id",
	Name:            "name",
	ExternalIds:     "external_ids",
	CreatedAt:       "created_at",
	UpdatedAt:       "updated_at",
	TokenID:         "token_id",
	LogoURL:         "logo_url",
	OemPlatformName: "oem_platform_name",
	NameSlug:        "name_slug",
	Metadata:        "metadata",
}

var DeviceMakeTableColumns = struct {
	ID              string
	Name            string
	ExternalIds     string
	CreatedAt       string
	UpdatedAt       string
	TokenID         string
	LogoURL         string
	OemPlatformName string
	NameSlug        string
	Metadata        string
}{
	ID:              "device_makes.id",
	Name:            "device_makes.name",
	ExternalIds:     "device_makes.external_ids",
	CreatedAt:       "device_makes.created_at",
	UpdatedAt:       "device_makes.updated_at",
	TokenID:         "device_makes.token_id",
	LogoURL:         "device_makes.logo_url",
	OemPlatformName: "device_makes.oem_platform_name",
	NameSlug:        "device_makes.name_slug",
	Metadata:        "device_makes.metadata",
}

// Generated where

type whereHelpertypes_NullDecimal struct{ field string }

func (w whereHelpertypes_NullDecimal) EQ(x types.NullDecimal) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpertypes_NullDecimal) NEQ(x types.NullDecimal) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpertypes_NullDecimal) LT(x types.NullDecimal) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpertypes_NullDecimal) LTE(x types.NullDecimal) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpertypes_NullDecimal) GT(x types.NullDecimal) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpertypes_NullDecimal) GTE(x types.NullDecimal) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

func (w whereHelpertypes_NullDecimal) IsNull() qm.QueryMod { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpertypes_NullDecimal) IsNotNull() qm.QueryMod {
	return qmhelper.WhereIsNotNull(w.field)
}

var DeviceMakeWhere = struct {
	ID              whereHelperstring
	Name            whereHelperstring
	ExternalIds     whereHelpernull_JSON
	CreatedAt       whereHelpertime_Time
	UpdatedAt       whereHelpertime_Time
	TokenID         whereHelpertypes_NullDecimal
	LogoURL         whereHelpernull_String
	OemPlatformName whereHelpernull_String
	NameSlug        whereHelperstring
	Metadata        whereHelpernull_JSON
}{
	ID:              whereHelperstring{field: "\"device_definitions_api\".\"device_makes\".\"id\""},
	Name:            whereHelperstring{field: "\"device_definitions_api\".\"device_makes\".\"name\""},
	ExternalIds:     whereHelpernull_JSON{field: "\"device_definitions_api\".\"device_makes\".\"external_ids\""},
	CreatedAt:       whereHelpertime_Time{field: "\"device_definitions_api\".\"device_makes\".\"created_at\""},
	UpdatedAt:       whereHelpertime_Time{field: "\"device_definitions_api\".\"device_makes\".\"updated_at\""},
	TokenID:         whereHelpertypes_NullDecimal{field: "\"device_definitions_api\".\"device_makes\".\"token_id\""},
	LogoURL:         whereHelpernull_String{field: "\"device_definitions_api\".\"device_makes\".\"logo_url\""},
	OemPlatformName: whereHelpernull_String{field: "\"device_definitions_api\".\"device_makes\".\"oem_platform_name\""},
	NameSlug:        whereHelperstring{field: "\"device_definitions_api\".\"device_makes\".\"name_slug\""},
	Metadata:        whereHelpernull_JSON{field: "\"device_definitions_api\".\"device_makes\".\"metadata\""},
}

// DeviceMakeRels is where relationship names are stored.
var DeviceMakeRels = struct {
	DeviceDefinitions string
}{
	DeviceDefinitions: "DeviceDefinitions",
}

// deviceMakeR is where relationships are stored.
type deviceMakeR struct {
	DeviceDefinitions DeviceDefinitionSlice `boil:"DeviceDefinitions" json:"DeviceDefinitions" toml:"DeviceDefinitions" yaml:"DeviceDefinitions"`
}

// NewStruct creates a new relationship struct
func (*deviceMakeR) NewStruct() *deviceMakeR {
	return &deviceMakeR{}
}

func (r *deviceMakeR) GetDeviceDefinitions() DeviceDefinitionSlice {
	if r == nil {
		return nil
	}
	return r.DeviceDefinitions
}

// deviceMakeL is where Load methods for each relationship are stored.
type deviceMakeL struct{}

var (
	deviceMakeAllColumns            = []string{"id", "name", "external_ids", "created_at", "updated_at", "token_id", "logo_url", "oem_platform_name", "name_slug", "metadata"}
	deviceMakeColumnsWithoutDefault = []string{"id", "name", "name_slug"}
	deviceMakeColumnsWithDefault    = []string{"external_ids", "created_at", "updated_at", "token_id", "logo_url", "oem_platform_name", "metadata"}
	deviceMakePrimaryKeyColumns     = []string{"id"}
	deviceMakeGeneratedColumns      = []string{}
)

type (
	// DeviceMakeSlice is an alias for a slice of pointers to DeviceMake.
	// This should almost always be used instead of []DeviceMake.
	DeviceMakeSlice []*DeviceMake
	// DeviceMakeHook is the signature for custom DeviceMake hook methods
	DeviceMakeHook func(context.Context, boil.ContextExecutor, *DeviceMake) error

	deviceMakeQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	deviceMakeType                 = reflect.TypeOf(&DeviceMake{})
	deviceMakeMapping              = queries.MakeStructMapping(deviceMakeType)
	deviceMakePrimaryKeyMapping, _ = queries.BindMapping(deviceMakeType, deviceMakeMapping, deviceMakePrimaryKeyColumns)
	deviceMakeInsertCacheMut       sync.RWMutex
	deviceMakeInsertCache          = make(map[string]insertCache)
	deviceMakeUpdateCacheMut       sync.RWMutex
	deviceMakeUpdateCache          = make(map[string]updateCache)
	deviceMakeUpsertCacheMut       sync.RWMutex
	deviceMakeUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var deviceMakeAfterSelectHooks []DeviceMakeHook

var deviceMakeBeforeInsertHooks []DeviceMakeHook
var deviceMakeAfterInsertHooks []DeviceMakeHook

var deviceMakeBeforeUpdateHooks []DeviceMakeHook
var deviceMakeAfterUpdateHooks []DeviceMakeHook

var deviceMakeBeforeDeleteHooks []DeviceMakeHook
var deviceMakeAfterDeleteHooks []DeviceMakeHook

var deviceMakeBeforeUpsertHooks []DeviceMakeHook
var deviceMakeAfterUpsertHooks []DeviceMakeHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *DeviceMake) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range deviceMakeAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *DeviceMake) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range deviceMakeBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *DeviceMake) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range deviceMakeAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *DeviceMake) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range deviceMakeBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *DeviceMake) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range deviceMakeAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *DeviceMake) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range deviceMakeBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *DeviceMake) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range deviceMakeAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *DeviceMake) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range deviceMakeBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *DeviceMake) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range deviceMakeAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddDeviceMakeHook registers your hook function for all future operations.
func AddDeviceMakeHook(hookPoint boil.HookPoint, deviceMakeHook DeviceMakeHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		deviceMakeAfterSelectHooks = append(deviceMakeAfterSelectHooks, deviceMakeHook)
	case boil.BeforeInsertHook:
		deviceMakeBeforeInsertHooks = append(deviceMakeBeforeInsertHooks, deviceMakeHook)
	case boil.AfterInsertHook:
		deviceMakeAfterInsertHooks = append(deviceMakeAfterInsertHooks, deviceMakeHook)
	case boil.BeforeUpdateHook:
		deviceMakeBeforeUpdateHooks = append(deviceMakeBeforeUpdateHooks, deviceMakeHook)
	case boil.AfterUpdateHook:
		deviceMakeAfterUpdateHooks = append(deviceMakeAfterUpdateHooks, deviceMakeHook)
	case boil.BeforeDeleteHook:
		deviceMakeBeforeDeleteHooks = append(deviceMakeBeforeDeleteHooks, deviceMakeHook)
	case boil.AfterDeleteHook:
		deviceMakeAfterDeleteHooks = append(deviceMakeAfterDeleteHooks, deviceMakeHook)
	case boil.BeforeUpsertHook:
		deviceMakeBeforeUpsertHooks = append(deviceMakeBeforeUpsertHooks, deviceMakeHook)
	case boil.AfterUpsertHook:
		deviceMakeAfterUpsertHooks = append(deviceMakeAfterUpsertHooks, deviceMakeHook)
	}
}

// One returns a single deviceMake record from the query.
func (q deviceMakeQuery) One(ctx context.Context, exec boil.ContextExecutor) (*DeviceMake, error) {
	o := &DeviceMake{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for device_makes")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all DeviceMake records from the query.
func (q deviceMakeQuery) All(ctx context.Context, exec boil.ContextExecutor) (DeviceMakeSlice, error) {
	var o []*DeviceMake

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to DeviceMake slice")
	}

	if len(deviceMakeAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all DeviceMake records in the query.
func (q deviceMakeQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count device_makes rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q deviceMakeQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if device_makes exists")
	}

	return count > 0, nil
}

// DeviceDefinitions retrieves all the device_definition's DeviceDefinitions with an executor.
func (o *DeviceMake) DeviceDefinitions(mods ...qm.QueryMod) deviceDefinitionQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"device_definitions_api\".\"device_definitions\".\"device_make_id\"=?", o.ID),
	)

	return DeviceDefinitions(queryMods...)
}

// LoadDeviceDefinitions allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (deviceMakeL) LoadDeviceDefinitions(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDeviceMake interface{}, mods queries.Applicator) error {
	var slice []*DeviceMake
	var object *DeviceMake

	if singular {
		var ok bool
		object, ok = maybeDeviceMake.(*DeviceMake)
		if !ok {
			object = new(DeviceMake)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDeviceMake)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDeviceMake))
			}
		}
	} else {
		s, ok := maybeDeviceMake.(*[]*DeviceMake)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDeviceMake)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDeviceMake))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &deviceMakeR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &deviceMakeR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`device_definitions_api.device_definitions`),
		qm.WhereIn(`device_definitions_api.device_definitions.device_make_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load device_definitions")
	}

	var resultSlice []*DeviceDefinition
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice device_definitions")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on device_definitions")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for device_definitions")
	}

	if len(deviceDefinitionAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.DeviceDefinitions = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &deviceDefinitionR{}
			}
			foreign.R.DeviceMake = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.DeviceMakeID {
				local.R.DeviceDefinitions = append(local.R.DeviceDefinitions, foreign)
				if foreign.R == nil {
					foreign.R = &deviceDefinitionR{}
				}
				foreign.R.DeviceMake = local
				break
			}
		}
	}

	return nil
}

// AddDeviceDefinitions adds the given related objects to the existing relationships
// of the device_make, optionally inserting them as new records.
// Appends related to o.R.DeviceDefinitions.
// Sets related.R.DeviceMake appropriately.
func (o *DeviceMake) AddDeviceDefinitions(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DeviceDefinition) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.DeviceMakeID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"device_definitions_api\".\"device_definitions\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"device_make_id"}),
				strmangle.WhereClause("\"", "\"", 2, deviceDefinitionPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.DeviceMakeID = o.ID
		}
	}

	if o.R == nil {
		o.R = &deviceMakeR{
			DeviceDefinitions: related,
		}
	} else {
		o.R.DeviceDefinitions = append(o.R.DeviceDefinitions, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &deviceDefinitionR{
				DeviceMake: o,
			}
		} else {
			rel.R.DeviceMake = o
		}
	}
	return nil
}

// DeviceMakes retrieves all the records using an executor.
func DeviceMakes(mods ...qm.QueryMod) deviceMakeQuery {
	mods = append(mods, qm.From("\"device_definitions_api\".\"device_makes\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"device_definitions_api\".\"device_makes\".*"})
	}

	return deviceMakeQuery{q}
}

// FindDeviceMake retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindDeviceMake(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*DeviceMake, error) {
	deviceMakeObj := &DeviceMake{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"device_definitions_api\".\"device_makes\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, deviceMakeObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from device_makes")
	}

	if err = deviceMakeObj.doAfterSelectHooks(ctx, exec); err != nil {
		return deviceMakeObj, err
	}

	return deviceMakeObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *DeviceMake) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no device_makes provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(deviceMakeColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	deviceMakeInsertCacheMut.RLock()
	cache, cached := deviceMakeInsertCache[key]
	deviceMakeInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			deviceMakeAllColumns,
			deviceMakeColumnsWithDefault,
			deviceMakeColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(deviceMakeType, deviceMakeMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(deviceMakeType, deviceMakeMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"device_definitions_api\".\"device_makes\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"device_definitions_api\".\"device_makes\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into device_makes")
	}

	if !cached {
		deviceMakeInsertCacheMut.Lock()
		deviceMakeInsertCache[key] = cache
		deviceMakeInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the DeviceMake.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *DeviceMake) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	deviceMakeUpdateCacheMut.RLock()
	cache, cached := deviceMakeUpdateCache[key]
	deviceMakeUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			deviceMakeAllColumns,
			deviceMakePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update device_makes, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"device_definitions_api\".\"device_makes\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, deviceMakePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(deviceMakeType, deviceMakeMapping, append(wl, deviceMakePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update device_makes row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for device_makes")
	}

	if !cached {
		deviceMakeUpdateCacheMut.Lock()
		deviceMakeUpdateCache[key] = cache
		deviceMakeUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q deviceMakeQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for device_makes")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for device_makes")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o DeviceMakeSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), deviceMakePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"device_definitions_api\".\"device_makes\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, deviceMakePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in deviceMake slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all deviceMake")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *DeviceMake) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no device_makes provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(deviceMakeColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	deviceMakeUpsertCacheMut.RLock()
	cache, cached := deviceMakeUpsertCache[key]
	deviceMakeUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			deviceMakeAllColumns,
			deviceMakeColumnsWithDefault,
			deviceMakeColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			deviceMakeAllColumns,
			deviceMakePrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert device_makes, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(deviceMakePrimaryKeyColumns))
			copy(conflict, deviceMakePrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"device_definitions_api\".\"device_makes\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(deviceMakeType, deviceMakeMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(deviceMakeType, deviceMakeMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert device_makes")
	}

	if !cached {
		deviceMakeUpsertCacheMut.Lock()
		deviceMakeUpsertCache[key] = cache
		deviceMakeUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single DeviceMake record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *DeviceMake) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no DeviceMake provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), deviceMakePrimaryKeyMapping)
	sql := "DELETE FROM \"device_definitions_api\".\"device_makes\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from device_makes")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for device_makes")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q deviceMakeQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no deviceMakeQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from device_makes")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for device_makes")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o DeviceMakeSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(deviceMakeBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), deviceMakePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"device_definitions_api\".\"device_makes\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, deviceMakePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from deviceMake slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for device_makes")
	}

	if len(deviceMakeAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *DeviceMake) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindDeviceMake(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *DeviceMakeSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := DeviceMakeSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), deviceMakePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"device_definitions_api\".\"device_makes\".* FROM \"device_definitions_api\".\"device_makes\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, deviceMakePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in DeviceMakeSlice")
	}

	*o = slice

	return nil
}

// DeviceMakeExists checks if the DeviceMake row exists.
func DeviceMakeExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"device_definitions_api\".\"device_makes\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if device_makes exists")
	}

	return exists, nil
}
