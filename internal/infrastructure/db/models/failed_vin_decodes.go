// Code generated by SQLBoiler 4.19.5 (https://github.com/aarondl/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/aarondl/null/v8"
	"github.com/aarondl/sqlboiler/v4/boil"
	"github.com/aarondl/sqlboiler/v4/queries"
	"github.com/aarondl/sqlboiler/v4/queries/qm"
	"github.com/aarondl/sqlboiler/v4/queries/qmhelper"
	"github.com/aarondl/sqlboiler/v4/types"
	"github.com/aarondl/strmangle"
	"github.com/friendsofgo/errors"
)

// FailedVinDecode is an object representing the database table.
type FailedVinDecode struct {
	Vin              string            `boil:"vin" json:"vin" toml:"vin" yaml:"vin"`
	VendorsTried     types.StringArray `boil:"vendors_tried" json:"vendors_tried,omitempty" toml:"vendors_tried" yaml:"vendors_tried,omitempty"`
	VincarioData     null.JSON         `boil:"vincario_data" json:"vincario_data,omitempty" toml:"vincario_data" yaml:"vincario_data,omitempty"`
	DrivlyData       null.JSON         `boil:"drivly_data" json:"drivly_data,omitempty" toml:"drivly_data" yaml:"drivly_data,omitempty"`
	AutoisoData      null.JSON         `boil:"autoiso_data" json:"autoiso_data,omitempty" toml:"autoiso_data" yaml:"autoiso_data,omitempty"`
	DatgroupData     null.JSON         `boil:"datgroup_data" json:"datgroup_data,omitempty" toml:"datgroup_data" yaml:"datgroup_data,omitempty"`
	Vin17Data        null.JSON         `boil:"vin17_data" json:"vin17_data,omitempty" toml:"vin17_data" yaml:"vin17_data,omitempty"`
	ManufacturerName null.String       `boil:"manufacturer_name" json:"manufacturer_name,omitempty" toml:"manufacturer_name" yaml:"manufacturer_name,omitempty"`
	CreatedAt        time.Time         `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`

	R *failedVinDecodeR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L failedVinDecodeL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var FailedVinDecodeColumns = struct {
	Vin              string
	VendorsTried     string
	VincarioData     string
	DrivlyData       string
	AutoisoData      string
	DatgroupData     string
	Vin17Data        string
	ManufacturerName string
	CreatedAt        string
}{
	Vin:              "vin",
	VendorsTried:     "vendors_tried",
	VincarioData:     "vincario_data",
	DrivlyData:       "drivly_data",
	AutoisoData:      "autoiso_data",
	DatgroupData:     "datgroup_data",
	Vin17Data:        "vin17_data",
	ManufacturerName: "manufacturer_name",
	CreatedAt:        "created_at",
}

var FailedVinDecodeTableColumns = struct {
	Vin              string
	VendorsTried     string
	VincarioData     string
	DrivlyData       string
	AutoisoData      string
	DatgroupData     string
	Vin17Data        string
	ManufacturerName string
	CreatedAt        string
}{
	Vin:              "failed_vin_decodes.vin",
	VendorsTried:     "failed_vin_decodes.vendors_tried",
	VincarioData:     "failed_vin_decodes.vincario_data",
	DrivlyData:       "failed_vin_decodes.drivly_data",
	AutoisoData:      "failed_vin_decodes.autoiso_data",
	DatgroupData:     "failed_vin_decodes.datgroup_data",
	Vin17Data:        "failed_vin_decodes.vin17_data",
	ManufacturerName: "failed_vin_decodes.manufacturer_name",
	CreatedAt:        "failed_vin_decodes.created_at",
}

// Generated where

type whereHelpertypes_StringArray struct{ field string }

func (w whereHelpertypes_StringArray) EQ(x types.StringArray) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpertypes_StringArray) NEQ(x types.StringArray) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpertypes_StringArray) LT(x types.StringArray) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpertypes_StringArray) LTE(x types.StringArray) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpertypes_StringArray) GT(x types.StringArray) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpertypes_StringArray) GTE(x types.StringArray) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

func (w whereHelpertypes_StringArray) IsNull() qm.QueryMod { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpertypes_StringArray) IsNotNull() qm.QueryMod {
	return qmhelper.WhereIsNotNull(w.field)
}

var FailedVinDecodeWhere = struct {
	Vin              whereHelperstring
	VendorsTried     whereHelpertypes_StringArray
	VincarioData     whereHelpernull_JSON
	DrivlyData       whereHelpernull_JSON
	AutoisoData      whereHelpernull_JSON
	DatgroupData     whereHelpernull_JSON
	Vin17Data        whereHelpernull_JSON
	ManufacturerName whereHelpernull_String
	CreatedAt        whereHelpertime_Time
}{
	Vin:              whereHelperstring{field: "\"device_definitions_api\".\"failed_vin_decodes\".\"vin\""},
	VendorsTried:     whereHelpertypes_StringArray{field: "\"device_definitions_api\".\"failed_vin_decodes\".\"vendors_tried\""},
	VincarioData:     whereHelpernull_JSON{field: "\"device_definitions_api\".\"failed_vin_decodes\".\"vincario_data\""},
	DrivlyData:       whereHelpernull_JSON{field: "\"device_definitions_api\".\"failed_vin_decodes\".\"drivly_data\""},
	AutoisoData:      whereHelpernull_JSON{field: "\"device_definitions_api\".\"failed_vin_decodes\".\"autoiso_data\""},
	DatgroupData:     whereHelpernull_JSON{field: "\"device_definitions_api\".\"failed_vin_decodes\".\"datgroup_data\""},
	Vin17Data:        whereHelpernull_JSON{field: "\"device_definitions_api\".\"failed_vin_decodes\".\"vin17_data\""},
	ManufacturerName: whereHelpernull_String{field: "\"device_definitions_api\".\"failed_vin_decodes\".\"manufacturer_name\""},
	CreatedAt:        whereHelpertime_Time{field: "\"device_definitions_api\".\"failed_vin_decodes\".\"created_at\""},
}

// FailedVinDecodeRels is where relationship names are stored.
var FailedVinDecodeRels = struct {
}{}

// failedVinDecodeR is where relationships are stored.
type failedVinDecodeR struct {
}

// NewStruct creates a new relationship struct
func (*failedVinDecodeR) NewStruct() *failedVinDecodeR {
	return &failedVinDecodeR{}
}

// failedVinDecodeL is where Load methods for each relationship are stored.
type failedVinDecodeL struct{}

var (
	failedVinDecodeAllColumns            = []string{"vin", "vendors_tried", "vincario_data", "drivly_data", "autoiso_data", "datgroup_data", "vin17_data", "manufacturer_name", "created_at"}
	failedVinDecodeColumnsWithoutDefault = []string{"vin"}
	failedVinDecodeColumnsWithDefault    = []string{"vendors_tried", "vincario_data", "drivly_data", "autoiso_data", "datgroup_data", "vin17_data", "manufacturer_name", "created_at"}
	failedVinDecodePrimaryKeyColumns     = []string{"vin"}
	failedVinDecodeGeneratedColumns      = []string{}
)

type (
	// FailedVinDecodeSlice is an alias for a slice of pointers to FailedVinDecode.
	// This should almost always be used instead of []FailedVinDecode.
	FailedVinDecodeSlice []*FailedVinDecode
	// FailedVinDecodeHook is the signature for custom FailedVinDecode hook methods
	FailedVinDecodeHook func(context.Context, boil.ContextExecutor, *FailedVinDecode) error

	failedVinDecodeQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	failedVinDecodeType                 = reflect.TypeOf(&FailedVinDecode{})
	failedVinDecodeMapping              = queries.MakeStructMapping(failedVinDecodeType)
	failedVinDecodePrimaryKeyMapping, _ = queries.BindMapping(failedVinDecodeType, failedVinDecodeMapping, failedVinDecodePrimaryKeyColumns)
	failedVinDecodeInsertCacheMut       sync.RWMutex
	failedVinDecodeInsertCache          = make(map[string]insertCache)
	failedVinDecodeUpdateCacheMut       sync.RWMutex
	failedVinDecodeUpdateCache          = make(map[string]updateCache)
	failedVinDecodeUpsertCacheMut       sync.RWMutex
	failedVinDecodeUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var failedVinDecodeAfterSelectMu sync.Mutex
var failedVinDecodeAfterSelectHooks []FailedVinDecodeHook

var failedVinDecodeBeforeInsertMu sync.Mutex
var failedVinDecodeBeforeInsertHooks []FailedVinDecodeHook
var failedVinDecodeAfterInsertMu sync.Mutex
var failedVinDecodeAfterInsertHooks []FailedVinDecodeHook

var failedVinDecodeBeforeUpdateMu sync.Mutex
var failedVinDecodeBeforeUpdateHooks []FailedVinDecodeHook
var failedVinDecodeAfterUpdateMu sync.Mutex
var failedVinDecodeAfterUpdateHooks []FailedVinDecodeHook

var failedVinDecodeBeforeDeleteMu sync.Mutex
var failedVinDecodeBeforeDeleteHooks []FailedVinDecodeHook
var failedVinDecodeAfterDeleteMu sync.Mutex
var failedVinDecodeAfterDeleteHooks []FailedVinDecodeHook

var failedVinDecodeBeforeUpsertMu sync.Mutex
var failedVinDecodeBeforeUpsertHooks []FailedVinDecodeHook
var failedVinDecodeAfterUpsertMu sync.Mutex
var failedVinDecodeAfterUpsertHooks []FailedVinDecodeHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *FailedVinDecode) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range failedVinDecodeAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *FailedVinDecode) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range failedVinDecodeBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *FailedVinDecode) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range failedVinDecodeAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *FailedVinDecode) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range failedVinDecodeBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *FailedVinDecode) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range failedVinDecodeAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *FailedVinDecode) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range failedVinDecodeBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *FailedVinDecode) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range failedVinDecodeAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *FailedVinDecode) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range failedVinDecodeBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *FailedVinDecode) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range failedVinDecodeAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddFailedVinDecodeHook registers your hook function for all future operations.
func AddFailedVinDecodeHook(hookPoint boil.HookPoint, failedVinDecodeHook FailedVinDecodeHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		failedVinDecodeAfterSelectMu.Lock()
		failedVinDecodeAfterSelectHooks = append(failedVinDecodeAfterSelectHooks, failedVinDecodeHook)
		failedVinDecodeAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		failedVinDecodeBeforeInsertMu.Lock()
		failedVinDecodeBeforeInsertHooks = append(failedVinDecodeBeforeInsertHooks, failedVinDecodeHook)
		failedVinDecodeBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		failedVinDecodeAfterInsertMu.Lock()
		failedVinDecodeAfterInsertHooks = append(failedVinDecodeAfterInsertHooks, failedVinDecodeHook)
		failedVinDecodeAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		failedVinDecodeBeforeUpdateMu.Lock()
		failedVinDecodeBeforeUpdateHooks = append(failedVinDecodeBeforeUpdateHooks, failedVinDecodeHook)
		failedVinDecodeBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		failedVinDecodeAfterUpdateMu.Lock()
		failedVinDecodeAfterUpdateHooks = append(failedVinDecodeAfterUpdateHooks, failedVinDecodeHook)
		failedVinDecodeAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		failedVinDecodeBeforeDeleteMu.Lock()
		failedVinDecodeBeforeDeleteHooks = append(failedVinDecodeBeforeDeleteHooks, failedVinDecodeHook)
		failedVinDecodeBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		failedVinDecodeAfterDeleteMu.Lock()
		failedVinDecodeAfterDeleteHooks = append(failedVinDecodeAfterDeleteHooks, failedVinDecodeHook)
		failedVinDecodeAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		failedVinDecodeBeforeUpsertMu.Lock()
		failedVinDecodeBeforeUpsertHooks = append(failedVinDecodeBeforeUpsertHooks, failedVinDecodeHook)
		failedVinDecodeBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		failedVinDecodeAfterUpsertMu.Lock()
		failedVinDecodeAfterUpsertHooks = append(failedVinDecodeAfterUpsertHooks, failedVinDecodeHook)
		failedVinDecodeAfterUpsertMu.Unlock()
	}
}

// One returns a single failedVinDecode record from the query.
func (q failedVinDecodeQuery) One(ctx context.Context, exec boil.ContextExecutor) (*FailedVinDecode, error) {
	o := &FailedVinDecode{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for failed_vin_decodes")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all FailedVinDecode records from the query.
func (q failedVinDecodeQuery) All(ctx context.Context, exec boil.ContextExecutor) (FailedVinDecodeSlice, error) {
	var o []*FailedVinDecode

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to FailedVinDecode slice")
	}

	if len(failedVinDecodeAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all FailedVinDecode records in the query.
func (q failedVinDecodeQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count failed_vin_decodes rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q failedVinDecodeQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if failed_vin_decodes exists")
	}

	return count > 0, nil
}

// FailedVinDecodes retrieves all the records using an executor.
func FailedVinDecodes(mods ...qm.QueryMod) failedVinDecodeQuery {
	mods = append(mods, qm.From("\"device_definitions_api\".\"failed_vin_decodes\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"device_definitions_api\".\"failed_vin_decodes\".*"})
	}

	return failedVinDecodeQuery{q}
}

// FindFailedVinDecode retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindFailedVinDecode(ctx context.Context, exec boil.ContextExecutor, vin string, selectCols ...string) (*FailedVinDecode, error) {
	failedVinDecodeObj := &FailedVinDecode{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"device_definitions_api\".\"failed_vin_decodes\" where \"vin\"=$1", sel,
	)

	q := queries.Raw(query, vin)

	err := q.Bind(ctx, exec, failedVinDecodeObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from failed_vin_decodes")
	}

	if err = failedVinDecodeObj.doAfterSelectHooks(ctx, exec); err != nil {
		return failedVinDecodeObj, err
	}

	return failedVinDecodeObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *FailedVinDecode) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no failed_vin_decodes provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(failedVinDecodeColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	failedVinDecodeInsertCacheMut.RLock()
	cache, cached := failedVinDecodeInsertCache[key]
	failedVinDecodeInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			failedVinDecodeAllColumns,
			failedVinDecodeColumnsWithDefault,
			failedVinDecodeColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(failedVinDecodeType, failedVinDecodeMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(failedVinDecodeType, failedVinDecodeMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"device_definitions_api\".\"failed_vin_decodes\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"device_definitions_api\".\"failed_vin_decodes\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into failed_vin_decodes")
	}

	if !cached {
		failedVinDecodeInsertCacheMut.Lock()
		failedVinDecodeInsertCache[key] = cache
		failedVinDecodeInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the FailedVinDecode.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *FailedVinDecode) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	failedVinDecodeUpdateCacheMut.RLock()
	cache, cached := failedVinDecodeUpdateCache[key]
	failedVinDecodeUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			failedVinDecodeAllColumns,
			failedVinDecodePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update failed_vin_decodes, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"device_definitions_api\".\"failed_vin_decodes\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, failedVinDecodePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(failedVinDecodeType, failedVinDecodeMapping, append(wl, failedVinDecodePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update failed_vin_decodes row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for failed_vin_decodes")
	}

	if !cached {
		failedVinDecodeUpdateCacheMut.Lock()
		failedVinDecodeUpdateCache[key] = cache
		failedVinDecodeUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q failedVinDecodeQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for failed_vin_decodes")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for failed_vin_decodes")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o FailedVinDecodeSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), failedVinDecodePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"device_definitions_api\".\"failed_vin_decodes\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, failedVinDecodePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in failedVinDecode slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all failedVinDecode")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *FailedVinDecode) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("models: no failed_vin_decodes provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(failedVinDecodeColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	failedVinDecodeUpsertCacheMut.RLock()
	cache, cached := failedVinDecodeUpsertCache[key]
	failedVinDecodeUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			failedVinDecodeAllColumns,
			failedVinDecodeColumnsWithDefault,
			failedVinDecodeColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			failedVinDecodeAllColumns,
			failedVinDecodePrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert failed_vin_decodes, could not build update column list")
		}

		ret := strmangle.SetComplement(failedVinDecodeAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(failedVinDecodePrimaryKeyColumns) == 0 {
				return errors.New("models: unable to upsert failed_vin_decodes, could not build conflict column list")
			}

			conflict = make([]string, len(failedVinDecodePrimaryKeyColumns))
			copy(conflict, failedVinDecodePrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"device_definitions_api\".\"failed_vin_decodes\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(failedVinDecodeType, failedVinDecodeMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(failedVinDecodeType, failedVinDecodeMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert failed_vin_decodes")
	}

	if !cached {
		failedVinDecodeUpsertCacheMut.Lock()
		failedVinDecodeUpsertCache[key] = cache
		failedVinDecodeUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single FailedVinDecode record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *FailedVinDecode) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no FailedVinDecode provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), failedVinDecodePrimaryKeyMapping)
	sql := "DELETE FROM \"device_definitions_api\".\"failed_vin_decodes\" WHERE \"vin\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from failed_vin_decodes")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for failed_vin_decodes")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q failedVinDecodeQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no failedVinDecodeQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from failed_vin_decodes")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for failed_vin_decodes")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o FailedVinDecodeSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(failedVinDecodeBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), failedVinDecodePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"device_definitions_api\".\"failed_vin_decodes\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, failedVinDecodePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from failedVinDecode slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for failed_vin_decodes")
	}

	if len(failedVinDecodeAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *FailedVinDecode) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindFailedVinDecode(ctx, exec, o.Vin)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *FailedVinDecodeSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := FailedVinDecodeSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), failedVinDecodePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"device_definitions_api\".\"failed_vin_decodes\".* FROM \"device_definitions_api\".\"failed_vin_decodes\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, failedVinDecodePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in FailedVinDecodeSlice")
	}

	*o = slice

	return nil
}

// FailedVinDecodeExists checks if the FailedVinDecode row exists.
func FailedVinDecodeExists(ctx context.Context, exec boil.ContextExecutor, vin string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"device_definitions_api\".\"failed_vin_decodes\" where \"vin\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, vin)
	}
	row := exec.QueryRowContext(ctx, sql, vin)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if failed_vin_decodes exists")
	}

	return exists, nil
}

// Exists checks if the FailedVinDecode row exists.
func (o *FailedVinDecode) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return FailedVinDecodeExists(ctx, exec, o.Vin)
}
