// Code generated by SQLBoiler 4.13.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// VinNumber is an object representing the database table.
type VinNumber struct {
	Vin                string      `boil:"vin" json:"vin" toml:"vin" yaml:"vin"`
	Wmi                string      `boil:"wmi" json:"wmi" toml:"wmi" yaml:"wmi"`
	VDS                string      `boil:"vds" json:"vds" toml:"vds" yaml:"vds"`
	CheckDigit         string      `boil:"check_digit" json:"check_digit" toml:"check_digit" yaml:"check_digit"`
	SerialNumber       string      `boil:"serial_number" json:"serial_number" toml:"serial_number" yaml:"serial_number"`
	Vis                string      `boil:"vis" json:"vis" toml:"vis" yaml:"vis"`
	DeviceMakeID       string      `boil:"device_make_id" json:"device_make_id" toml:"device_make_id" yaml:"device_make_id"`
	DeviceDefinitionID string      `boil:"device_definition_id" json:"device_definition_id" toml:"device_definition_id" yaml:"device_definition_id"`
	CreatedAt          time.Time   `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt          time.Time   `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	StyleID            null.String `boil:"style_id" json:"style_id,omitempty" toml:"style_id" yaml:"style_id,omitempty"`
	DecodeProvider     null.String `boil:"decode_provider" json:"decode_provider,omitempty" toml:"decode_provider" yaml:"decode_provider,omitempty"`
	Year               int         `boil:"year" json:"year" toml:"year" yaml:"year"`

	R *vinNumberR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L vinNumberL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var VinNumberColumns = struct {
	Vin                string
	Wmi                string
	VDS                string
	CheckDigit         string
	SerialNumber       string
	Vis                string
	DeviceMakeID       string
	DeviceDefinitionID string
	CreatedAt          string
	UpdatedAt          string
	StyleID            string
	DecodeProvider     string
	Year               string
}{
	Vin:                "vin",
	Wmi:                "wmi",
	VDS:                "vds",
	CheckDigit:         "check_digit",
	SerialNumber:       "serial_number",
	Vis:                "vis",
	DeviceMakeID:       "device_make_id",
	DeviceDefinitionID: "device_definition_id",
	CreatedAt:          "created_at",
	UpdatedAt:          "updated_at",
	StyleID:            "style_id",
	DecodeProvider:     "decode_provider",
	Year:               "year",
}

var VinNumberTableColumns = struct {
	Vin                string
	Wmi                string
	VDS                string
	CheckDigit         string
	SerialNumber       string
	Vis                string
	DeviceMakeID       string
	DeviceDefinitionID string
	CreatedAt          string
	UpdatedAt          string
	StyleID            string
	DecodeProvider     string
	Year               string
}{
	Vin:                "vin_numbers.vin",
	Wmi:                "vin_numbers.wmi",
	VDS:                "vin_numbers.vds",
	CheckDigit:         "vin_numbers.check_digit",
	SerialNumber:       "vin_numbers.serial_number",
	Vis:                "vin_numbers.vis",
	DeviceMakeID:       "vin_numbers.device_make_id",
	DeviceDefinitionID: "vin_numbers.device_definition_id",
	CreatedAt:          "vin_numbers.created_at",
	UpdatedAt:          "vin_numbers.updated_at",
	StyleID:            "vin_numbers.style_id",
	DecodeProvider:     "vin_numbers.decode_provider",
	Year:               "vin_numbers.year",
}

// Generated where

var VinNumberWhere = struct {
	Vin                whereHelperstring
	Wmi                whereHelperstring
	VDS                whereHelperstring
	CheckDigit         whereHelperstring
	SerialNumber       whereHelperstring
	Vis                whereHelperstring
	DeviceMakeID       whereHelperstring
	DeviceDefinitionID whereHelperstring
	CreatedAt          whereHelpertime_Time
	UpdatedAt          whereHelpertime_Time
	StyleID            whereHelpernull_String
	DecodeProvider     whereHelpernull_String
	Year               whereHelperint
}{
	Vin:                whereHelperstring{field: "\"device_definitions_api\".\"vin_numbers\".\"vin\""},
	Wmi:                whereHelperstring{field: "\"device_definitions_api\".\"vin_numbers\".\"wmi\""},
	VDS:                whereHelperstring{field: "\"device_definitions_api\".\"vin_numbers\".\"vds\""},
	CheckDigit:         whereHelperstring{field: "\"device_definitions_api\".\"vin_numbers\".\"check_digit\""},
	SerialNumber:       whereHelperstring{field: "\"device_definitions_api\".\"vin_numbers\".\"serial_number\""},
	Vis:                whereHelperstring{field: "\"device_definitions_api\".\"vin_numbers\".\"vis\""},
	DeviceMakeID:       whereHelperstring{field: "\"device_definitions_api\".\"vin_numbers\".\"device_make_id\""},
	DeviceDefinitionID: whereHelperstring{field: "\"device_definitions_api\".\"vin_numbers\".\"device_definition_id\""},
	CreatedAt:          whereHelpertime_Time{field: "\"device_definitions_api\".\"vin_numbers\".\"created_at\""},
	UpdatedAt:          whereHelpertime_Time{field: "\"device_definitions_api\".\"vin_numbers\".\"updated_at\""},
	StyleID:            whereHelpernull_String{field: "\"device_definitions_api\".\"vin_numbers\".\"style_id\""},
	DecodeProvider:     whereHelpernull_String{field: "\"device_definitions_api\".\"vin_numbers\".\"decode_provider\""},
	Year:               whereHelperint{field: "\"device_definitions_api\".\"vin_numbers\".\"year\""},
}

// VinNumberRels is where relationship names are stored.
var VinNumberRels = struct {
	Style            string
	DeviceDefinition string
	DeviceMake       string
}{
	Style:            "Style",
	DeviceDefinition: "DeviceDefinition",
	DeviceMake:       "DeviceMake",
}

// vinNumberR is where relationships are stored.
type vinNumberR struct {
	Style            *DeviceStyle      `boil:"Style" json:"Style" toml:"Style" yaml:"Style"`
	DeviceDefinition *DeviceDefinition `boil:"DeviceDefinition" json:"DeviceDefinition" toml:"DeviceDefinition" yaml:"DeviceDefinition"`
	DeviceMake       *DeviceMake       `boil:"DeviceMake" json:"DeviceMake" toml:"DeviceMake" yaml:"DeviceMake"`
}

// NewStruct creates a new relationship struct
func (*vinNumberR) NewStruct() *vinNumberR {
	return &vinNumberR{}
}

func (r *vinNumberR) GetStyle() *DeviceStyle {
	if r == nil {
		return nil
	}
	return r.Style
}

func (r *vinNumberR) GetDeviceDefinition() *DeviceDefinition {
	if r == nil {
		return nil
	}
	return r.DeviceDefinition
}

func (r *vinNumberR) GetDeviceMake() *DeviceMake {
	if r == nil {
		return nil
	}
	return r.DeviceMake
}

// vinNumberL is where Load methods for each relationship are stored.
type vinNumberL struct{}

var (
	vinNumberAllColumns            = []string{"vin", "wmi", "vds", "check_digit", "serial_number", "vis", "device_make_id", "device_definition_id", "created_at", "updated_at", "style_id", "decode_provider", "year"}
	vinNumberColumnsWithoutDefault = []string{"vin", "wmi", "vds", "check_digit", "serial_number", "vis", "device_make_id", "device_definition_id", "year"}
	vinNumberColumnsWithDefault    = []string{"created_at", "updated_at", "style_id", "decode_provider"}
	vinNumberPrimaryKeyColumns     = []string{"vin"}
	vinNumberGeneratedColumns      = []string{}
)

type (
	// VinNumberSlice is an alias for a slice of pointers to VinNumber.
	// This should almost always be used instead of []VinNumber.
	VinNumberSlice []*VinNumber
	// VinNumberHook is the signature for custom VinNumber hook methods
	VinNumberHook func(context.Context, boil.ContextExecutor, *VinNumber) error

	vinNumberQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	vinNumberType                 = reflect.TypeOf(&VinNumber{})
	vinNumberMapping              = queries.MakeStructMapping(vinNumberType)
	vinNumberPrimaryKeyMapping, _ = queries.BindMapping(vinNumberType, vinNumberMapping, vinNumberPrimaryKeyColumns)
	vinNumberInsertCacheMut       sync.RWMutex
	vinNumberInsertCache          = make(map[string]insertCache)
	vinNumberUpdateCacheMut       sync.RWMutex
	vinNumberUpdateCache          = make(map[string]updateCache)
	vinNumberUpsertCacheMut       sync.RWMutex
	vinNumberUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var vinNumberAfterSelectHooks []VinNumberHook

var vinNumberBeforeInsertHooks []VinNumberHook
var vinNumberAfterInsertHooks []VinNumberHook

var vinNumberBeforeUpdateHooks []VinNumberHook
var vinNumberAfterUpdateHooks []VinNumberHook

var vinNumberBeforeDeleteHooks []VinNumberHook
var vinNumberAfterDeleteHooks []VinNumberHook

var vinNumberBeforeUpsertHooks []VinNumberHook
var vinNumberAfterUpsertHooks []VinNumberHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *VinNumber) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range vinNumberAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *VinNumber) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range vinNumberBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *VinNumber) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range vinNumberAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *VinNumber) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range vinNumberBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *VinNumber) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range vinNumberAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *VinNumber) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range vinNumberBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *VinNumber) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range vinNumberAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *VinNumber) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range vinNumberBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *VinNumber) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range vinNumberAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddVinNumberHook registers your hook function for all future operations.
func AddVinNumberHook(hookPoint boil.HookPoint, vinNumberHook VinNumberHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		vinNumberAfterSelectHooks = append(vinNumberAfterSelectHooks, vinNumberHook)
	case boil.BeforeInsertHook:
		vinNumberBeforeInsertHooks = append(vinNumberBeforeInsertHooks, vinNumberHook)
	case boil.AfterInsertHook:
		vinNumberAfterInsertHooks = append(vinNumberAfterInsertHooks, vinNumberHook)
	case boil.BeforeUpdateHook:
		vinNumberBeforeUpdateHooks = append(vinNumberBeforeUpdateHooks, vinNumberHook)
	case boil.AfterUpdateHook:
		vinNumberAfterUpdateHooks = append(vinNumberAfterUpdateHooks, vinNumberHook)
	case boil.BeforeDeleteHook:
		vinNumberBeforeDeleteHooks = append(vinNumberBeforeDeleteHooks, vinNumberHook)
	case boil.AfterDeleteHook:
		vinNumberAfterDeleteHooks = append(vinNumberAfterDeleteHooks, vinNumberHook)
	case boil.BeforeUpsertHook:
		vinNumberBeforeUpsertHooks = append(vinNumberBeforeUpsertHooks, vinNumberHook)
	case boil.AfterUpsertHook:
		vinNumberAfterUpsertHooks = append(vinNumberAfterUpsertHooks, vinNumberHook)
	}
}

// One returns a single vinNumber record from the query.
func (q vinNumberQuery) One(ctx context.Context, exec boil.ContextExecutor) (*VinNumber, error) {
	o := &VinNumber{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for vin_numbers")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all VinNumber records from the query.
func (q vinNumberQuery) All(ctx context.Context, exec boil.ContextExecutor) (VinNumberSlice, error) {
	var o []*VinNumber

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to VinNumber slice")
	}

	if len(vinNumberAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all VinNumber records in the query.
func (q vinNumberQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count vin_numbers rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q vinNumberQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if vin_numbers exists")
	}

	return count > 0, nil
}

// Style pointed to by the foreign key.
func (o *VinNumber) Style(mods ...qm.QueryMod) deviceStyleQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.StyleID),
	}

	queryMods = append(queryMods, mods...)

	return DeviceStyles(queryMods...)
}

// DeviceDefinition pointed to by the foreign key.
func (o *VinNumber) DeviceDefinition(mods ...qm.QueryMod) deviceDefinitionQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.DeviceDefinitionID),
	}

	queryMods = append(queryMods, mods...)

	return DeviceDefinitions(queryMods...)
}

// DeviceMake pointed to by the foreign key.
func (o *VinNumber) DeviceMake(mods ...qm.QueryMod) deviceMakeQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.DeviceMakeID),
	}

	queryMods = append(queryMods, mods...)

	return DeviceMakes(queryMods...)
}

// LoadStyle allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (vinNumberL) LoadStyle(ctx context.Context, e boil.ContextExecutor, singular bool, maybeVinNumber interface{}, mods queries.Applicator) error {
	var slice []*VinNumber
	var object *VinNumber

	if singular {
		var ok bool
		object, ok = maybeVinNumber.(*VinNumber)
		if !ok {
			object = new(VinNumber)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeVinNumber)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeVinNumber))
			}
		}
	} else {
		s, ok := maybeVinNumber.(*[]*VinNumber)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeVinNumber)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeVinNumber))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &vinNumberR{}
		}
		if !queries.IsNil(object.StyleID) {
			args = append(args, object.StyleID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &vinNumberR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.StyleID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.StyleID) {
				args = append(args, obj.StyleID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`device_definitions_api.device_styles`),
		qm.WhereIn(`device_definitions_api.device_styles.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DeviceStyle")
	}

	var resultSlice []*DeviceStyle
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DeviceStyle")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for device_styles")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for device_styles")
	}

	if len(vinNumberAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Style = foreign
		if foreign.R == nil {
			foreign.R = &deviceStyleR{}
		}
		foreign.R.StyleVinNumbers = append(foreign.R.StyleVinNumbers, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.StyleID, foreign.ID) {
				local.R.Style = foreign
				if foreign.R == nil {
					foreign.R = &deviceStyleR{}
				}
				foreign.R.StyleVinNumbers = append(foreign.R.StyleVinNumbers, local)
				break
			}
		}
	}

	return nil
}

// LoadDeviceDefinition allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (vinNumberL) LoadDeviceDefinition(ctx context.Context, e boil.ContextExecutor, singular bool, maybeVinNumber interface{}, mods queries.Applicator) error {
	var slice []*VinNumber
	var object *VinNumber

	if singular {
		var ok bool
		object, ok = maybeVinNumber.(*VinNumber)
		if !ok {
			object = new(VinNumber)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeVinNumber)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeVinNumber))
			}
		}
	} else {
		s, ok := maybeVinNumber.(*[]*VinNumber)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeVinNumber)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeVinNumber))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &vinNumberR{}
		}
		args = append(args, object.DeviceDefinitionID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &vinNumberR{}
			}

			for _, a := range args {
				if a == obj.DeviceDefinitionID {
					continue Outer
				}
			}

			args = append(args, obj.DeviceDefinitionID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`device_definitions_api.device_definitions`),
		qm.WhereIn(`device_definitions_api.device_definitions.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DeviceDefinition")
	}

	var resultSlice []*DeviceDefinition
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DeviceDefinition")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for device_definitions")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for device_definitions")
	}

	if len(vinNumberAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.DeviceDefinition = foreign
		if foreign.R == nil {
			foreign.R = &deviceDefinitionR{}
		}
		foreign.R.VinNumbers = append(foreign.R.VinNumbers, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.DeviceDefinitionID == foreign.ID {
				local.R.DeviceDefinition = foreign
				if foreign.R == nil {
					foreign.R = &deviceDefinitionR{}
				}
				foreign.R.VinNumbers = append(foreign.R.VinNumbers, local)
				break
			}
		}
	}

	return nil
}

// LoadDeviceMake allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (vinNumberL) LoadDeviceMake(ctx context.Context, e boil.ContextExecutor, singular bool, maybeVinNumber interface{}, mods queries.Applicator) error {
	var slice []*VinNumber
	var object *VinNumber

	if singular {
		var ok bool
		object, ok = maybeVinNumber.(*VinNumber)
		if !ok {
			object = new(VinNumber)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeVinNumber)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeVinNumber))
			}
		}
	} else {
		s, ok := maybeVinNumber.(*[]*VinNumber)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeVinNumber)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeVinNumber))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &vinNumberR{}
		}
		args = append(args, object.DeviceMakeID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &vinNumberR{}
			}

			for _, a := range args {
				if a == obj.DeviceMakeID {
					continue Outer
				}
			}

			args = append(args, obj.DeviceMakeID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`device_definitions_api.device_makes`),
		qm.WhereIn(`device_definitions_api.device_makes.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DeviceMake")
	}

	var resultSlice []*DeviceMake
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DeviceMake")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for device_makes")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for device_makes")
	}

	if len(vinNumberAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.DeviceMake = foreign
		if foreign.R == nil {
			foreign.R = &deviceMakeR{}
		}
		foreign.R.VinNumbers = append(foreign.R.VinNumbers, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.DeviceMakeID == foreign.ID {
				local.R.DeviceMake = foreign
				if foreign.R == nil {
					foreign.R = &deviceMakeR{}
				}
				foreign.R.VinNumbers = append(foreign.R.VinNumbers, local)
				break
			}
		}
	}

	return nil
}

// SetStyle of the vinNumber to the related item.
// Sets o.R.Style to related.
// Adds o to related.R.StyleVinNumbers.
func (o *VinNumber) SetStyle(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DeviceStyle) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"device_definitions_api\".\"vin_numbers\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"style_id"}),
		strmangle.WhereClause("\"", "\"", 2, vinNumberPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.Vin}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.StyleID, related.ID)
	if o.R == nil {
		o.R = &vinNumberR{
			Style: related,
		}
	} else {
		o.R.Style = related
	}

	if related.R == nil {
		related.R = &deviceStyleR{
			StyleVinNumbers: VinNumberSlice{o},
		}
	} else {
		related.R.StyleVinNumbers = append(related.R.StyleVinNumbers, o)
	}

	return nil
}

// RemoveStyle relationship.
// Sets o.R.Style to nil.
// Removes o from all passed in related items' relationships struct.
func (o *VinNumber) RemoveStyle(ctx context.Context, exec boil.ContextExecutor, related *DeviceStyle) error {
	var err error

	queries.SetScanner(&o.StyleID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("style_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.Style = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.StyleVinNumbers {
		if queries.Equal(o.StyleID, ri.StyleID) {
			continue
		}

		ln := len(related.R.StyleVinNumbers)
		if ln > 1 && i < ln-1 {
			related.R.StyleVinNumbers[i] = related.R.StyleVinNumbers[ln-1]
		}
		related.R.StyleVinNumbers = related.R.StyleVinNumbers[:ln-1]
		break
	}
	return nil
}

// SetDeviceDefinition of the vinNumber to the related item.
// Sets o.R.DeviceDefinition to related.
// Adds o to related.R.VinNumbers.
func (o *VinNumber) SetDeviceDefinition(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DeviceDefinition) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"device_definitions_api\".\"vin_numbers\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"device_definition_id"}),
		strmangle.WhereClause("\"", "\"", 2, vinNumberPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.Vin}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.DeviceDefinitionID = related.ID
	if o.R == nil {
		o.R = &vinNumberR{
			DeviceDefinition: related,
		}
	} else {
		o.R.DeviceDefinition = related
	}

	if related.R == nil {
		related.R = &deviceDefinitionR{
			VinNumbers: VinNumberSlice{o},
		}
	} else {
		related.R.VinNumbers = append(related.R.VinNumbers, o)
	}

	return nil
}

// SetDeviceMake of the vinNumber to the related item.
// Sets o.R.DeviceMake to related.
// Adds o to related.R.VinNumbers.
func (o *VinNumber) SetDeviceMake(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DeviceMake) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"device_definitions_api\".\"vin_numbers\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"device_make_id"}),
		strmangle.WhereClause("\"", "\"", 2, vinNumberPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.Vin}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.DeviceMakeID = related.ID
	if o.R == nil {
		o.R = &vinNumberR{
			DeviceMake: related,
		}
	} else {
		o.R.DeviceMake = related
	}

	if related.R == nil {
		related.R = &deviceMakeR{
			VinNumbers: VinNumberSlice{o},
		}
	} else {
		related.R.VinNumbers = append(related.R.VinNumbers, o)
	}

	return nil
}

// VinNumbers retrieves all the records using an executor.
func VinNumbers(mods ...qm.QueryMod) vinNumberQuery {
	mods = append(mods, qm.From("\"device_definitions_api\".\"vin_numbers\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"device_definitions_api\".\"vin_numbers\".*"})
	}

	return vinNumberQuery{q}
}

// FindVinNumber retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindVinNumber(ctx context.Context, exec boil.ContextExecutor, vin string, selectCols ...string) (*VinNumber, error) {
	vinNumberObj := &VinNumber{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"device_definitions_api\".\"vin_numbers\" where \"vin\"=$1", sel,
	)

	q := queries.Raw(query, vin)

	err := q.Bind(ctx, exec, vinNumberObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from vin_numbers")
	}

	if err = vinNumberObj.doAfterSelectHooks(ctx, exec); err != nil {
		return vinNumberObj, err
	}

	return vinNumberObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *VinNumber) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no vin_numbers provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(vinNumberColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	vinNumberInsertCacheMut.RLock()
	cache, cached := vinNumberInsertCache[key]
	vinNumberInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			vinNumberAllColumns,
			vinNumberColumnsWithDefault,
			vinNumberColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(vinNumberType, vinNumberMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(vinNumberType, vinNumberMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"device_definitions_api\".\"vin_numbers\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"device_definitions_api\".\"vin_numbers\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into vin_numbers")
	}

	if !cached {
		vinNumberInsertCacheMut.Lock()
		vinNumberInsertCache[key] = cache
		vinNumberInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the VinNumber.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *VinNumber) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	vinNumberUpdateCacheMut.RLock()
	cache, cached := vinNumberUpdateCache[key]
	vinNumberUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			vinNumberAllColumns,
			vinNumberPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update vin_numbers, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"device_definitions_api\".\"vin_numbers\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, vinNumberPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(vinNumberType, vinNumberMapping, append(wl, vinNumberPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update vin_numbers row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for vin_numbers")
	}

	if !cached {
		vinNumberUpdateCacheMut.Lock()
		vinNumberUpdateCache[key] = cache
		vinNumberUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q vinNumberQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for vin_numbers")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for vin_numbers")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o VinNumberSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), vinNumberPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"device_definitions_api\".\"vin_numbers\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, vinNumberPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in vinNumber slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all vinNumber")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *VinNumber) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no vin_numbers provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(vinNumberColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	vinNumberUpsertCacheMut.RLock()
	cache, cached := vinNumberUpsertCache[key]
	vinNumberUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			vinNumberAllColumns,
			vinNumberColumnsWithDefault,
			vinNumberColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			vinNumberAllColumns,
			vinNumberPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert vin_numbers, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(vinNumberPrimaryKeyColumns))
			copy(conflict, vinNumberPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"device_definitions_api\".\"vin_numbers\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(vinNumberType, vinNumberMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(vinNumberType, vinNumberMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert vin_numbers")
	}

	if !cached {
		vinNumberUpsertCacheMut.Lock()
		vinNumberUpsertCache[key] = cache
		vinNumberUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single VinNumber record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *VinNumber) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no VinNumber provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), vinNumberPrimaryKeyMapping)
	sql := "DELETE FROM \"device_definitions_api\".\"vin_numbers\" WHERE \"vin\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from vin_numbers")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for vin_numbers")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q vinNumberQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no vinNumberQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from vin_numbers")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for vin_numbers")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o VinNumberSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(vinNumberBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), vinNumberPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"device_definitions_api\".\"vin_numbers\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, vinNumberPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from vinNumber slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for vin_numbers")
	}

	if len(vinNumberAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *VinNumber) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindVinNumber(ctx, exec, o.Vin)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *VinNumberSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := VinNumberSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), vinNumberPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"device_definitions_api\".\"vin_numbers\".* FROM \"device_definitions_api\".\"vin_numbers\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, vinNumberPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in VinNumberSlice")
	}

	*o = slice

	return nil
}

// VinNumberExists checks if the VinNumber row exists.
func VinNumberExists(ctx context.Context, exec boil.ContextExecutor, vin string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"device_definitions_api\".\"vin_numbers\" where \"vin\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, vin)
	}
	row := exec.QueryRowContext(ctx, sql, vin)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if vin_numbers exists")
	}

	return exists, nil
}
