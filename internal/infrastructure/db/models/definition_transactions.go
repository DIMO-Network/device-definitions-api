// Code generated by SQLBoiler 4.18.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// DefinitionTransaction is an object representing the database table.
type DefinitionTransaction struct {
	TransactionHash string    `boil:"transaction_hash" json:"transaction_hash" toml:"transaction_hash" yaml:"transaction_hash"`
	DefinitionID    string    `boil:"definition_id" json:"definition_id" toml:"definition_id" yaml:"definition_id"`
	CreatedAt       time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	ManufacturerID  int64     `boil:"manufacturer_id" json:"manufacturer_id" toml:"manufacturer_id" yaml:"manufacturer_id"`

	R *definitionTransactionR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L definitionTransactionL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var DefinitionTransactionColumns = struct {
	TransactionHash string
	DefinitionID    string
	CreatedAt       string
	ManufacturerID  string
}{
	TransactionHash: "transaction_hash",
	DefinitionID:    "definition_id",
	CreatedAt:       "created_at",
	ManufacturerID:  "manufacturer_id",
}

var DefinitionTransactionTableColumns = struct {
	TransactionHash string
	DefinitionID    string
	CreatedAt       string
	ManufacturerID  string
}{
	TransactionHash: "definition_transactions.transaction_hash",
	DefinitionID:    "definition_transactions.definition_id",
	CreatedAt:       "definition_transactions.created_at",
	ManufacturerID:  "definition_transactions.manufacturer_id",
}

// Generated where

type whereHelperstring struct{ field string }

func (w whereHelperstring) EQ(x string) qm.QueryMod      { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperstring) NEQ(x string) qm.QueryMod     { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperstring) LT(x string) qm.QueryMod      { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperstring) LTE(x string) qm.QueryMod     { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperstring) GT(x string) qm.QueryMod      { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperstring) GTE(x string) qm.QueryMod     { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperstring) LIKE(x string) qm.QueryMod    { return qm.Where(w.field+" LIKE ?", x) }
func (w whereHelperstring) NLIKE(x string) qm.QueryMod   { return qm.Where(w.field+" NOT LIKE ?", x) }
func (w whereHelperstring) ILIKE(x string) qm.QueryMod   { return qm.Where(w.field+" ILIKE ?", x) }
func (w whereHelperstring) NILIKE(x string) qm.QueryMod  { return qm.Where(w.field+" NOT ILIKE ?", x) }
func (w whereHelperstring) SIMILAR(x string) qm.QueryMod { return qm.Where(w.field+" SIMILAR TO ?", x) }
func (w whereHelperstring) NSIMILAR(x string) qm.QueryMod {
	return qm.Where(w.field+" NOT SIMILAR TO ?", x)
}
func (w whereHelperstring) IN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperstring) NIN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelpertime_Time struct{ field string }

func (w whereHelpertime_Time) EQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelpertime_Time) NEQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelpertime_Time) LT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpertime_Time) LTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpertime_Time) GT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpertime_Time) GTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

type whereHelperint64 struct{ field string }

func (w whereHelperint64) EQ(x int64) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperint64) NEQ(x int64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperint64) LT(x int64) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperint64) LTE(x int64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperint64) GT(x int64) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperint64) GTE(x int64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperint64) IN(slice []int64) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperint64) NIN(slice []int64) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

var DefinitionTransactionWhere = struct {
	TransactionHash whereHelperstring
	DefinitionID    whereHelperstring
	CreatedAt       whereHelpertime_Time
	ManufacturerID  whereHelperint64
}{
	TransactionHash: whereHelperstring{field: "\"device_definitions_api\".\"definition_transactions\".\"transaction_hash\""},
	DefinitionID:    whereHelperstring{field: "\"device_definitions_api\".\"definition_transactions\".\"definition_id\""},
	CreatedAt:       whereHelpertime_Time{field: "\"device_definitions_api\".\"definition_transactions\".\"created_at\""},
	ManufacturerID:  whereHelperint64{field: "\"device_definitions_api\".\"definition_transactions\".\"manufacturer_id\""},
}

// DefinitionTransactionRels is where relationship names are stored.
var DefinitionTransactionRels = struct {
}{}

// definitionTransactionR is where relationships are stored.
type definitionTransactionR struct {
}

// NewStruct creates a new relationship struct
func (*definitionTransactionR) NewStruct() *definitionTransactionR {
	return &definitionTransactionR{}
}

// definitionTransactionL is where Load methods for each relationship are stored.
type definitionTransactionL struct{}

var (
	definitionTransactionAllColumns            = []string{"transaction_hash", "definition_id", "created_at", "manufacturer_id"}
	definitionTransactionColumnsWithoutDefault = []string{"transaction_hash", "definition_id", "manufacturer_id"}
	definitionTransactionColumnsWithDefault    = []string{"created_at"}
	definitionTransactionPrimaryKeyColumns     = []string{"transaction_hash"}
	definitionTransactionGeneratedColumns      = []string{}
)

type (
	// DefinitionTransactionSlice is an alias for a slice of pointers to DefinitionTransaction.
	// This should almost always be used instead of []DefinitionTransaction.
	DefinitionTransactionSlice []*DefinitionTransaction
	// DefinitionTransactionHook is the signature for custom DefinitionTransaction hook methods
	DefinitionTransactionHook func(context.Context, boil.ContextExecutor, *DefinitionTransaction) error

	definitionTransactionQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	definitionTransactionType                 = reflect.TypeOf(&DefinitionTransaction{})
	definitionTransactionMapping              = queries.MakeStructMapping(definitionTransactionType)
	definitionTransactionPrimaryKeyMapping, _ = queries.BindMapping(definitionTransactionType, definitionTransactionMapping, definitionTransactionPrimaryKeyColumns)
	definitionTransactionInsertCacheMut       sync.RWMutex
	definitionTransactionInsertCache          = make(map[string]insertCache)
	definitionTransactionUpdateCacheMut       sync.RWMutex
	definitionTransactionUpdateCache          = make(map[string]updateCache)
	definitionTransactionUpsertCacheMut       sync.RWMutex
	definitionTransactionUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var definitionTransactionAfterSelectMu sync.Mutex
var definitionTransactionAfterSelectHooks []DefinitionTransactionHook

var definitionTransactionBeforeInsertMu sync.Mutex
var definitionTransactionBeforeInsertHooks []DefinitionTransactionHook
var definitionTransactionAfterInsertMu sync.Mutex
var definitionTransactionAfterInsertHooks []DefinitionTransactionHook

var definitionTransactionBeforeUpdateMu sync.Mutex
var definitionTransactionBeforeUpdateHooks []DefinitionTransactionHook
var definitionTransactionAfterUpdateMu sync.Mutex
var definitionTransactionAfterUpdateHooks []DefinitionTransactionHook

var definitionTransactionBeforeDeleteMu sync.Mutex
var definitionTransactionBeforeDeleteHooks []DefinitionTransactionHook
var definitionTransactionAfterDeleteMu sync.Mutex
var definitionTransactionAfterDeleteHooks []DefinitionTransactionHook

var definitionTransactionBeforeUpsertMu sync.Mutex
var definitionTransactionBeforeUpsertHooks []DefinitionTransactionHook
var definitionTransactionAfterUpsertMu sync.Mutex
var definitionTransactionAfterUpsertHooks []DefinitionTransactionHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *DefinitionTransaction) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range definitionTransactionAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *DefinitionTransaction) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range definitionTransactionBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *DefinitionTransaction) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range definitionTransactionAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *DefinitionTransaction) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range definitionTransactionBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *DefinitionTransaction) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range definitionTransactionAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *DefinitionTransaction) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range definitionTransactionBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *DefinitionTransaction) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range definitionTransactionAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *DefinitionTransaction) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range definitionTransactionBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *DefinitionTransaction) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range definitionTransactionAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddDefinitionTransactionHook registers your hook function for all future operations.
func AddDefinitionTransactionHook(hookPoint boil.HookPoint, definitionTransactionHook DefinitionTransactionHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		definitionTransactionAfterSelectMu.Lock()
		definitionTransactionAfterSelectHooks = append(definitionTransactionAfterSelectHooks, definitionTransactionHook)
		definitionTransactionAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		definitionTransactionBeforeInsertMu.Lock()
		definitionTransactionBeforeInsertHooks = append(definitionTransactionBeforeInsertHooks, definitionTransactionHook)
		definitionTransactionBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		definitionTransactionAfterInsertMu.Lock()
		definitionTransactionAfterInsertHooks = append(definitionTransactionAfterInsertHooks, definitionTransactionHook)
		definitionTransactionAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		definitionTransactionBeforeUpdateMu.Lock()
		definitionTransactionBeforeUpdateHooks = append(definitionTransactionBeforeUpdateHooks, definitionTransactionHook)
		definitionTransactionBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		definitionTransactionAfterUpdateMu.Lock()
		definitionTransactionAfterUpdateHooks = append(definitionTransactionAfterUpdateHooks, definitionTransactionHook)
		definitionTransactionAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		definitionTransactionBeforeDeleteMu.Lock()
		definitionTransactionBeforeDeleteHooks = append(definitionTransactionBeforeDeleteHooks, definitionTransactionHook)
		definitionTransactionBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		definitionTransactionAfterDeleteMu.Lock()
		definitionTransactionAfterDeleteHooks = append(definitionTransactionAfterDeleteHooks, definitionTransactionHook)
		definitionTransactionAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		definitionTransactionBeforeUpsertMu.Lock()
		definitionTransactionBeforeUpsertHooks = append(definitionTransactionBeforeUpsertHooks, definitionTransactionHook)
		definitionTransactionBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		definitionTransactionAfterUpsertMu.Lock()
		definitionTransactionAfterUpsertHooks = append(definitionTransactionAfterUpsertHooks, definitionTransactionHook)
		definitionTransactionAfterUpsertMu.Unlock()
	}
}

// One returns a single definitionTransaction record from the query.
func (q definitionTransactionQuery) One(ctx context.Context, exec boil.ContextExecutor) (*DefinitionTransaction, error) {
	o := &DefinitionTransaction{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for definition_transactions")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all DefinitionTransaction records from the query.
func (q definitionTransactionQuery) All(ctx context.Context, exec boil.ContextExecutor) (DefinitionTransactionSlice, error) {
	var o []*DefinitionTransaction

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to DefinitionTransaction slice")
	}

	if len(definitionTransactionAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all DefinitionTransaction records in the query.
func (q definitionTransactionQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count definition_transactions rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q definitionTransactionQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if definition_transactions exists")
	}

	return count > 0, nil
}

// DefinitionTransactions retrieves all the records using an executor.
func DefinitionTransactions(mods ...qm.QueryMod) definitionTransactionQuery {
	mods = append(mods, qm.From("\"device_definitions_api\".\"definition_transactions\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"device_definitions_api\".\"definition_transactions\".*"})
	}

	return definitionTransactionQuery{q}
}

// FindDefinitionTransaction retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindDefinitionTransaction(ctx context.Context, exec boil.ContextExecutor, transactionHash string, selectCols ...string) (*DefinitionTransaction, error) {
	definitionTransactionObj := &DefinitionTransaction{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"device_definitions_api\".\"definition_transactions\" where \"transaction_hash\"=$1", sel,
	)

	q := queries.Raw(query, transactionHash)

	err := q.Bind(ctx, exec, definitionTransactionObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from definition_transactions")
	}

	if err = definitionTransactionObj.doAfterSelectHooks(ctx, exec); err != nil {
		return definitionTransactionObj, err
	}

	return definitionTransactionObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *DefinitionTransaction) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no definition_transactions provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(definitionTransactionColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	definitionTransactionInsertCacheMut.RLock()
	cache, cached := definitionTransactionInsertCache[key]
	definitionTransactionInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			definitionTransactionAllColumns,
			definitionTransactionColumnsWithDefault,
			definitionTransactionColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(definitionTransactionType, definitionTransactionMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(definitionTransactionType, definitionTransactionMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"device_definitions_api\".\"definition_transactions\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"device_definitions_api\".\"definition_transactions\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into definition_transactions")
	}

	if !cached {
		definitionTransactionInsertCacheMut.Lock()
		definitionTransactionInsertCache[key] = cache
		definitionTransactionInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the DefinitionTransaction.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *DefinitionTransaction) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	definitionTransactionUpdateCacheMut.RLock()
	cache, cached := definitionTransactionUpdateCache[key]
	definitionTransactionUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			definitionTransactionAllColumns,
			definitionTransactionPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update definition_transactions, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"device_definitions_api\".\"definition_transactions\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, definitionTransactionPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(definitionTransactionType, definitionTransactionMapping, append(wl, definitionTransactionPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update definition_transactions row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for definition_transactions")
	}

	if !cached {
		definitionTransactionUpdateCacheMut.Lock()
		definitionTransactionUpdateCache[key] = cache
		definitionTransactionUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q definitionTransactionQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for definition_transactions")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for definition_transactions")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o DefinitionTransactionSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), definitionTransactionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"device_definitions_api\".\"definition_transactions\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, definitionTransactionPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in definitionTransaction slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all definitionTransaction")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *DefinitionTransaction) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("models: no definition_transactions provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(definitionTransactionColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	definitionTransactionUpsertCacheMut.RLock()
	cache, cached := definitionTransactionUpsertCache[key]
	definitionTransactionUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			definitionTransactionAllColumns,
			definitionTransactionColumnsWithDefault,
			definitionTransactionColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			definitionTransactionAllColumns,
			definitionTransactionPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert definition_transactions, could not build update column list")
		}

		ret := strmangle.SetComplement(definitionTransactionAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(definitionTransactionPrimaryKeyColumns) == 0 {
				return errors.New("models: unable to upsert definition_transactions, could not build conflict column list")
			}

			conflict = make([]string, len(definitionTransactionPrimaryKeyColumns))
			copy(conflict, definitionTransactionPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"device_definitions_api\".\"definition_transactions\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(definitionTransactionType, definitionTransactionMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(definitionTransactionType, definitionTransactionMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert definition_transactions")
	}

	if !cached {
		definitionTransactionUpsertCacheMut.Lock()
		definitionTransactionUpsertCache[key] = cache
		definitionTransactionUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single DefinitionTransaction record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *DefinitionTransaction) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no DefinitionTransaction provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), definitionTransactionPrimaryKeyMapping)
	sql := "DELETE FROM \"device_definitions_api\".\"definition_transactions\" WHERE \"transaction_hash\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from definition_transactions")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for definition_transactions")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q definitionTransactionQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no definitionTransactionQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from definition_transactions")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for definition_transactions")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o DefinitionTransactionSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(definitionTransactionBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), definitionTransactionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"device_definitions_api\".\"definition_transactions\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, definitionTransactionPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from definitionTransaction slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for definition_transactions")
	}

	if len(definitionTransactionAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *DefinitionTransaction) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindDefinitionTransaction(ctx, exec, o.TransactionHash)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *DefinitionTransactionSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := DefinitionTransactionSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), definitionTransactionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"device_definitions_api\".\"definition_transactions\".* FROM \"device_definitions_api\".\"definition_transactions\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, definitionTransactionPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in DefinitionTransactionSlice")
	}

	*o = slice

	return nil
}

// DefinitionTransactionExists checks if the DefinitionTransaction row exists.
func DefinitionTransactionExists(ctx context.Context, exec boil.ContextExecutor, transactionHash string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"device_definitions_api\".\"definition_transactions\" where \"transaction_hash\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, transactionHash)
	}
	row := exec.QueryRowContext(ctx, sql, transactionHash)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if definition_transactions exists")
	}

	return exists, nil
}

// Exists checks if the DefinitionTransaction row exists.
func (o *DefinitionTransaction) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return DefinitionTransactionExists(ctx, exec, o.TransactionHash)
}
