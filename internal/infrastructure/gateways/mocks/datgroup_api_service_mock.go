// Code generated by MockGen. DO NOT EDIT.
// Source: datgroup_api_service.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gateways "github.com/DIMO-Network/device-definitions-api/internal/infrastructure/gateways"
	gomock "go.uber.org/mock/gomock"
)

// MockDATGroupAPIService is a mock of DATGroupAPIService interface.
type MockDATGroupAPIService struct {
	ctrl     *gomock.Controller
	recorder *MockDATGroupAPIServiceMockRecorder
}

// MockDATGroupAPIServiceMockRecorder is the mock recorder for MockDATGroupAPIService.
type MockDATGroupAPIServiceMockRecorder struct {
	mock *MockDATGroupAPIService
}

// NewMockDATGroupAPIService creates a new mock instance.
func NewMockDATGroupAPIService(ctrl *gomock.Controller) *MockDATGroupAPIService {
	mock := &MockDATGroupAPIService{ctrl: ctrl}
	mock.recorder = &MockDATGroupAPIServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDATGroupAPIService) EXPECT() *MockDATGroupAPIServiceMockRecorder {
	return m.recorder
}

// GetVIN mocks base method.
func (m *MockDATGroupAPIService) GetVIN(vin, country string) (*gateways.GetVehicleIdentificationByVinResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVIN", vin, country)
	ret0, _ := ret[0].(*gateways.GetVehicleIdentificationByVinResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVIN indicates an expected call of GetVIN.
func (mr *MockDATGroupAPIServiceMockRecorder) GetVIN(vin, country interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVIN", reflect.TypeOf((*MockDATGroupAPIService)(nil).GetVIN), vin, country)
}
