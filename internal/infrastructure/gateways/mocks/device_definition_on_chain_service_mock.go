// Code generated by MockGen. DO NOT EDIT.
// Source: device_definition_on_chain_service.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	models "github.com/DIMO-Network/device-definitions-api/internal/infrastructure/db/models"
	types "github.com/volatiletech/sqlboiler/v4/types"
	gomock "go.uber.org/mock/gomock"
)

// MockDeviceDefinitionOnChainService is a mock of DeviceDefinitionOnChainService interface.
type MockDeviceDefinitionOnChainService struct {
	ctrl     *gomock.Controller
	recorder *MockDeviceDefinitionOnChainServiceMockRecorder
}

// MockDeviceDefinitionOnChainServiceMockRecorder is the mock recorder for MockDeviceDefinitionOnChainService.
type MockDeviceDefinitionOnChainServiceMockRecorder struct {
	mock *MockDeviceDefinitionOnChainService
}

// NewMockDeviceDefinitionOnChainService creates a new mock instance.
func NewMockDeviceDefinitionOnChainService(ctrl *gomock.Controller) *MockDeviceDefinitionOnChainService {
	mock := &MockDeviceDefinitionOnChainService{ctrl: ctrl}
	mock.recorder = &MockDeviceDefinitionOnChainServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDeviceDefinitionOnChainService) EXPECT() *MockDeviceDefinitionOnChainServiceMockRecorder {
	return m.recorder
}

// CreateOrUpdate mocks base method.
func (m *MockDeviceDefinitionOnChainService) CreateOrUpdate(ctx context.Context, manufacturerID types.NullDecimal, dd models.DeviceDefinition) (*string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrUpdate", ctx, manufacturerID, dd)
	ret0, _ := ret[0].(*string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrUpdate indicates an expected call of CreateOrUpdate.
func (mr *MockDeviceDefinitionOnChainServiceMockRecorder) CreateOrUpdate(ctx, manufacturerID, dd interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrUpdate", reflect.TypeOf((*MockDeviceDefinitionOnChainService)(nil).CreateOrUpdate), ctx, manufacturerID, dd)
}
