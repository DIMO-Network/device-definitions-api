// Code generated by MockGen. DO NOT EDIT.
// Source: kaufmann_api.go
//
// Generated by this command:
//
//	mockgen -source kaufmann_api.go -destination mocks/kaufmann_api_mock.go -package mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	models "github.com/DIMO-Network/device-definitions-api/internal/core/models"
	gomock "go.uber.org/mock/gomock"
)

// MockElevaAPI is a mock of ElevaAPI interface.
type MockElevaAPI struct {
	ctrl     *gomock.Controller
	recorder *MockElevaAPIMockRecorder
	isgomock struct{}
}

// MockElevaAPIMockRecorder is the mock recorder for MockElevaAPI.
type MockElevaAPIMockRecorder struct {
	mock *MockElevaAPI
}

// NewMockElevaAPI creates a new mock instance.
func NewMockElevaAPI(ctrl *gomock.Controller) *MockElevaAPI {
	mock := &MockElevaAPI{ctrl: ctrl}
	mock.recorder = &MockElevaAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockElevaAPI) EXPECT() *MockElevaAPIMockRecorder {
	return m.recorder
}

// GetVINInfo mocks base method.
func (m *MockElevaAPI) GetVINInfo(vin string) (*models.ElevaVINResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVINInfo", vin)
	ret0, _ := ret[0].(*models.ElevaVINResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVINInfo indicates an expected call of GetVINInfo.
func (mr *MockElevaAPIMockRecorder) GetVINInfo(vin any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVINInfo", reflect.TypeOf((*MockElevaAPI)(nil).GetVINInfo), vin)
}
