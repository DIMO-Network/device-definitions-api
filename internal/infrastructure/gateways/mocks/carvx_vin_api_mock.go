// Code generated by MockGen. DO NOT EDIT.
// Source: carvx_vin_api.go
//
// Generated by this command:
//
//	mockgen -source carvx_vin_api.go -destination mocks/carvx_vin_api_mock.go -package mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	models "github.com/DIMO-Network/device-definitions-api/internal/core/models"
	gomock "go.uber.org/mock/gomock"
)

// MockCarVxVINAPI is a mock of CarVxVINAPI interface.
type MockCarVxVINAPI struct {
	ctrl     *gomock.Controller
	recorder *MockCarVxVINAPIMockRecorder
	isgomock struct{}
}

// MockCarVxVINAPIMockRecorder is the mock recorder for MockCarVxVINAPI.
type MockCarVxVINAPIMockRecorder struct {
	mock *MockCarVxVINAPI
}

// NewMockCarVxVINAPI creates a new mock instance.
func NewMockCarVxVINAPI(ctrl *gomock.Controller) *MockCarVxVINAPI {
	mock := &MockCarVxVINAPI{ctrl: ctrl}
	mock.recorder = &MockCarVxVINAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCarVxVINAPI) EXPECT() *MockCarVxVINAPIMockRecorder {
	return m.recorder
}

// GetVINInfo mocks base method.
func (m *MockCarVxVINAPI) GetVINInfo(chassisNumber string) (*models.CarVxResponse, []byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVINInfo", chassisNumber)
	ret0, _ := ret[0].(*models.CarVxResponse)
	ret1, _ := ret[1].([]byte)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetVINInfo indicates an expected call of GetVINInfo.
func (mr *MockCarVxVINAPIMockRecorder) GetVINInfo(chassisNumber any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVINInfo", reflect.TypeOf((*MockCarVxVINAPI)(nil).GetVINInfo), chassisNumber)
}
