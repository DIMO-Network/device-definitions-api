// Code generated by MockGen. DO NOT EDIT.
// Source: typesense_search_service.go
//
// Generated by this command:
//
//	mockgen -source typesense_search_service.go -destination mocks/typesense_search_service_mock.go -package mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	api "github.com/typesense/typesense-go/typesense/api"
	gomock "go.uber.org/mock/gomock"
)

// MockTypesenseAPIService is a mock of TypesenseAPIService interface.
type MockTypesenseAPIService struct {
	ctrl     *gomock.Controller
	recorder *MockTypesenseAPIServiceMockRecorder
}

// MockTypesenseAPIServiceMockRecorder is the mock recorder for MockTypesenseAPIService.
type MockTypesenseAPIServiceMockRecorder struct {
	mock *MockTypesenseAPIService
}

// NewMockTypesenseAPIService creates a new mock instance.
func NewMockTypesenseAPIService(ctrl *gomock.Controller) *MockTypesenseAPIService {
	mock := &MockTypesenseAPIService{ctrl: ctrl}
	mock.recorder = &MockTypesenseAPIServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTypesenseAPIService) EXPECT() *MockTypesenseAPIServiceMockRecorder {
	return m.recorder
}

// Autocomplete mocks base method.
func (m *MockTypesenseAPIService) Autocomplete(ctx context.Context, search string) (*api.SearchResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Autocomplete", ctx, search)
	ret0, _ := ret[0].(*api.SearchResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Autocomplete indicates an expected call of Autocomplete.
func (mr *MockTypesenseAPIServiceMockRecorder) Autocomplete(ctx, search any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Autocomplete", reflect.TypeOf((*MockTypesenseAPIService)(nil).Autocomplete), ctx, search)
}

// GetDeviceDefinitions mocks base method.
func (m *MockTypesenseAPIService) GetDeviceDefinitions(ctx context.Context, search, mk, model string, year, page, pageSize int) (*api.SearchResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDeviceDefinitions", ctx, search, mk, model, year, page, pageSize)
	ret0, _ := ret[0].(*api.SearchResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDeviceDefinitions indicates an expected call of GetDeviceDefinitions.
func (mr *MockTypesenseAPIServiceMockRecorder) GetDeviceDefinitions(ctx, search, mk, model, year, page, pageSize any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeviceDefinitions", reflect.TypeOf((*MockTypesenseAPIService)(nil).GetDeviceDefinitions), ctx, search, mk, model, year, page, pageSize)
}

// SearchR1Compatibility mocks base method.
func (m *MockTypesenseAPIService) SearchR1Compatibility(ctx context.Context, search string, page, pageSize int) (*api.SearchResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchR1Compatibility", ctx, search, page, pageSize)
	ret0, _ := ret[0].(*api.SearchResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchR1Compatibility indicates an expected call of SearchR1Compatibility.
func (mr *MockTypesenseAPIServiceMockRecorder) SearchR1Compatibility(ctx, search, page, pageSize any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchR1Compatibility", reflect.TypeOf((*MockTypesenseAPIService)(nil).SearchR1Compatibility), ctx, search, page, pageSize)
}
