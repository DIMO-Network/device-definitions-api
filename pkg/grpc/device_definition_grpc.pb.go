// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.26.1
// source: pkg/grpc/device_definition.proto

package grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	DeviceDefinitionService_GetDeviceDefinitionByID_FullMethodName                  = "/grpc.DeviceDefinitionService/GetDeviceDefinitionByID"
	DeviceDefinitionService_GetDeviceDefinitionBySlug_FullMethodName                = "/grpc.DeviceDefinitionService/GetDeviceDefinitionBySlug"
	DeviceDefinitionService_GetDeviceDefinitions_FullMethodName                     = "/grpc.DeviceDefinitionService/GetDeviceDefinitions"
	DeviceDefinitionService_GetDevicesMMY_FullMethodName                            = "/grpc.DeviceDefinitionService/GetDevicesMMY"
	DeviceDefinitionService_GetDeviceDefinitionsWithHardwareTemplate_FullMethodName = "/grpc.DeviceDefinitionService/GetDeviceDefinitionsWithHardwareTemplate"
	DeviceDefinitionService_GetDeviceDefinitionByMMY_FullMethodName                 = "/grpc.DeviceDefinitionService/GetDeviceDefinitionByMMY"
	DeviceDefinitionService_GetDeviceDefinitionBySource_FullMethodName              = "/grpc.DeviceDefinitionService/GetDeviceDefinitionBySource"
	DeviceDefinitionService_GetDeviceDefinitionWithoutImages_FullMethodName         = "/grpc.DeviceDefinitionService/GetDeviceDefinitionWithoutImages"
	DeviceDefinitionService_GetDeviceDefinitionAll_FullMethodName                   = "/grpc.DeviceDefinitionService/GetDeviceDefinitionAll"
	DeviceDefinitionService_GetDeviceMakeByName_FullMethodName                      = "/grpc.DeviceDefinitionService/GetDeviceMakeByName"
	DeviceDefinitionService_GetDeviceMakeBySlug_FullMethodName                      = "/grpc.DeviceDefinitionService/GetDeviceMakeBySlug"
	DeviceDefinitionService_GetDeviceMakeByTokenID_FullMethodName                   = "/grpc.DeviceDefinitionService/GetDeviceMakeByTokenID"
	DeviceDefinitionService_GetDeviceMakes_FullMethodName                           = "/grpc.DeviceDefinitionService/GetDeviceMakes"
	DeviceDefinitionService_GetIntegrations_FullMethodName                          = "/grpc.DeviceDefinitionService/GetIntegrations"
	DeviceDefinitionService_GetIntegrationByID_FullMethodName                       = "/grpc.DeviceDefinitionService/GetIntegrationByID"
	DeviceDefinitionService_GetDeviceDefinitionIntegration_FullMethodName           = "/grpc.DeviceDefinitionService/GetDeviceDefinitionIntegration"
	DeviceDefinitionService_GetDeviceImagesByIDs_FullMethodName                     = "/grpc.DeviceDefinitionService/GetDeviceImagesByIDs"
	DeviceDefinitionService_CreateDeviceDefinition_FullMethodName                   = "/grpc.DeviceDefinitionService/CreateDeviceDefinition"
	DeviceDefinitionService_CreateDeviceIntegration_FullMethodName                  = "/grpc.DeviceDefinitionService/CreateDeviceIntegration"
	DeviceDefinitionService_CreateDeviceStyle_FullMethodName                        = "/grpc.DeviceDefinitionService/CreateDeviceStyle"
	DeviceDefinitionService_CreateDeviceMake_FullMethodName                         = "/grpc.DeviceDefinitionService/CreateDeviceMake"
	DeviceDefinitionService_CreateIntegration_FullMethodName                        = "/grpc.DeviceDefinitionService/CreateIntegration"
	DeviceDefinitionService_UpdateDeviceDefinition_FullMethodName                   = "/grpc.DeviceDefinitionService/UpdateDeviceDefinition"
	DeviceDefinitionService_SetDeviceDefinitionImage_FullMethodName                 = "/grpc.DeviceDefinitionService/SetDeviceDefinitionImage"
	DeviceDefinitionService_GetFilteredDeviceDefinition_FullMethodName              = "/grpc.DeviceDefinitionService/GetFilteredDeviceDefinition"
	DeviceDefinitionService_GetDeviceStyleByID_FullMethodName                       = "/grpc.DeviceDefinitionService/GetDeviceStyleByID"
	DeviceDefinitionService_GetDeviceStyleByExternalID_FullMethodName               = "/grpc.DeviceDefinitionService/GetDeviceStyleByExternalID"
	DeviceDefinitionService_GetDeviceStylesByDeviceDefinitionID_FullMethodName      = "/grpc.DeviceDefinitionService/GetDeviceStylesByDeviceDefinitionID"
	DeviceDefinitionService_GetDeviceStylesByFilter_FullMethodName                  = "/grpc.DeviceDefinitionService/GetDeviceStylesByFilter"
	DeviceDefinitionService_UpdateDeviceMake_FullMethodName                         = "/grpc.DeviceDefinitionService/UpdateDeviceMake"
	DeviceDefinitionService_UpdateDeviceStyle_FullMethodName                        = "/grpc.DeviceDefinitionService/UpdateDeviceStyle"
	DeviceDefinitionService_GetDeviceTypesByID_FullMethodName                       = "/grpc.DeviceDefinitionService/GetDeviceTypesByID"
	DeviceDefinitionService_GetDeviceTypes_FullMethodName                           = "/grpc.DeviceDefinitionService/GetDeviceTypes"
	DeviceDefinitionService_CreateDeviceType_FullMethodName                         = "/grpc.DeviceDefinitionService/CreateDeviceType"
	DeviceDefinitionService_UpdateDeviceType_FullMethodName                         = "/grpc.DeviceDefinitionService/UpdateDeviceType"
	DeviceDefinitionService_DeleteDeviceType_FullMethodName                         = "/grpc.DeviceDefinitionService/DeleteDeviceType"
	DeviceDefinitionService_GetDeviceDefinitionHardwareTemplateByID_FullMethodName  = "/grpc.DeviceDefinitionService/GetDeviceDefinitionHardwareTemplateByID"
	DeviceDefinitionService_SyncDeviceDefinitionsWithElasticSearch_FullMethodName   = "/grpc.DeviceDefinitionService/SyncDeviceDefinitionsWithElasticSearch"
	DeviceDefinitionService_GetIntegrationByTokenID_FullMethodName                  = "/grpc.DeviceDefinitionService/GetIntegrationByTokenID"
	DeviceDefinitionService_GetDeviceDefinitionByMakeAndYearRange_FullMethodName    = "/grpc.DeviceDefinitionService/GetDeviceDefinitionByMakeAndYearRange"
	DeviceDefinitionService_GetDeviceDefinitionOnChainByID_FullMethodName           = "/grpc.DeviceDefinitionService/GetDeviceDefinitionOnChainByID"
	DeviceDefinitionService_GetDeviceDefinitionsOnChain_FullMethodName              = "/grpc.DeviceDefinitionService/GetDeviceDefinitionsOnChain"
	DeviceDefinitionService_GetDeviceDefinitionBySlugName_FullMethodName            = "/grpc.DeviceDefinitionService/GetDeviceDefinitionBySlugName"
)

// DeviceDefinitionServiceClient is the client API for DeviceDefinitionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DeviceDefinitionServiceClient interface {
	GetDeviceDefinitionByID(ctx context.Context, in *GetDeviceDefinitionRequest, opts ...grpc.CallOption) (*GetDeviceDefinitionResponse, error)
	GetDeviceDefinitionBySlug(ctx context.Context, in *GetDeviceDefinitionBySlugRequest, opts ...grpc.CallOption) (*GetDeviceDefinitionItemResponse, error)
	GetDeviceDefinitions(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetDeviceDefinitionResponse, error)
	GetDevicesMMY(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetDevicesMMYResponse, error)
	GetDeviceDefinitionsWithHardwareTemplate(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetDevicesMMYResponse, error)
	GetDeviceDefinitionByMMY(ctx context.Context, in *GetDeviceDefinitionByMMYRequest, opts ...grpc.CallOption) (*GetDeviceDefinitionItemResponse, error)
	GetDeviceDefinitionBySource(ctx context.Context, in *GetDeviceDefinitionBySourceRequest, opts ...grpc.CallOption) (DeviceDefinitionService_GetDeviceDefinitionBySourceClient, error)
	GetDeviceDefinitionWithoutImages(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetDeviceDefinitionResponse, error)
	GetDeviceDefinitionAll(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetDeviceDefinitionAllResponse, error)
	GetDeviceMakeByName(ctx context.Context, in *GetDeviceMakeByNameRequest, opts ...grpc.CallOption) (*DeviceMake, error)
	GetDeviceMakeBySlug(ctx context.Context, in *GetDeviceMakeBySlugRequest, opts ...grpc.CallOption) (*DeviceMake, error)
	GetDeviceMakeByTokenID(ctx context.Context, in *GetDeviceMakeByTokenIdRequest, opts ...grpc.CallOption) (*DeviceMake, error)
	GetDeviceMakes(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetDeviceMakeResponse, error)
	GetIntegrations(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetIntegrationResponse, error)
	GetIntegrationByID(ctx context.Context, in *GetIntegrationRequest, opts ...grpc.CallOption) (*Integration, error)
	GetDeviceDefinitionIntegration(ctx context.Context, in *GetDeviceDefinitionIntegrationRequest, opts ...grpc.CallOption) (*GetDeviceDefinitionIntegrationResponse, error)
	GetDeviceImagesByIDs(ctx context.Context, in *GetDeviceDefinitionRequest, opts ...grpc.CallOption) (*GetDeviceImagesResponse, error)
	CreateDeviceDefinition(ctx context.Context, in *CreateDeviceDefinitionRequest, opts ...grpc.CallOption) (*CreateDeviceDefinitionResponse, error)
	CreateDeviceIntegration(ctx context.Context, in *CreateDeviceIntegrationRequest, opts ...grpc.CallOption) (*BaseResponse, error)
	CreateDeviceStyle(ctx context.Context, in *CreateDeviceStyleRequest, opts ...grpc.CallOption) (*BaseResponse, error)
	CreateDeviceMake(ctx context.Context, in *CreateDeviceMakeRequest, opts ...grpc.CallOption) (*BaseResponse, error)
	CreateIntegration(ctx context.Context, in *CreateIntegrationRequest, opts ...grpc.CallOption) (*BaseResponse, error)
	UpdateDeviceDefinition(ctx context.Context, in *UpdateDeviceDefinitionRequest, opts ...grpc.CallOption) (*BaseResponse, error)
	SetDeviceDefinitionImage(ctx context.Context, in *UpdateDeviceDefinitionImageRequest, opts ...grpc.CallOption) (*BaseResponse, error)
	GetFilteredDeviceDefinition(ctx context.Context, in *FilterDeviceDefinitionRequest, opts ...grpc.CallOption) (*GetFilteredDeviceDefinitionsResponse, error)
	GetDeviceStyleByID(ctx context.Context, in *GetDeviceStyleByIDRequest, opts ...grpc.CallOption) (*DeviceStyle, error)
	GetDeviceStyleByExternalID(ctx context.Context, in *GetDeviceStyleByIDRequest, opts ...grpc.CallOption) (*DeviceStyle, error)
	GetDeviceStylesByDeviceDefinitionID(ctx context.Context, in *GetDeviceStyleByDeviceDefinitionIDRequest, opts ...grpc.CallOption) (*GetDeviceStyleResponse, error)
	GetDeviceStylesByFilter(ctx context.Context, in *GetDeviceStyleFilterRequest, opts ...grpc.CallOption) (*GetDeviceStyleResponse, error)
	UpdateDeviceMake(ctx context.Context, in *UpdateDeviceMakeRequest, opts ...grpc.CallOption) (*BaseResponse, error)
	UpdateDeviceStyle(ctx context.Context, in *UpdateDeviceStyleRequest, opts ...grpc.CallOption) (*BaseResponse, error)
	GetDeviceTypesByID(ctx context.Context, in *GetDeviceTypeByIDRequest, opts ...grpc.CallOption) (*GetDeviceTypeResponse, error)
	GetDeviceTypes(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetDeviceTypeListResponse, error)
	CreateDeviceType(ctx context.Context, in *CreateDeviceTypeRequest, opts ...grpc.CallOption) (*BaseResponse, error)
	UpdateDeviceType(ctx context.Context, in *UpdateDeviceTypeRequest, opts ...grpc.CallOption) (*BaseResponse, error)
	DeleteDeviceType(ctx context.Context, in *DeleteDeviceTypeRequest, opts ...grpc.CallOption) (*BaseResponse, error)
	GetDeviceDefinitionHardwareTemplateByID(ctx context.Context, in *GetDeviceDefinitionHardwareTemplateByIDRequest, opts ...grpc.CallOption) (*GetDeviceDefinitionHardwareTemplateByIDResponse, error)
	SyncDeviceDefinitionsWithElasticSearch(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*SyncStatusResult, error)
	GetIntegrationByTokenID(ctx context.Context, in *GetIntegrationByTokenIDRequest, opts ...grpc.CallOption) (*Integration, error)
	GetDeviceDefinitionByMakeAndYearRange(ctx context.Context, in *GetDeviceDefinitionByMakeAndYearRangeRequest, opts ...grpc.CallOption) (*GetDeviceDefinitionResponse, error)
	GetDeviceDefinitionOnChainByID(ctx context.Context, in *GetDeviceDefinitionRequest, opts ...grpc.CallOption) (*GetDeviceDefinitionResponse, error)
	GetDeviceDefinitionsOnChain(ctx context.Context, in *FilterDeviceDefinitionRequest, opts ...grpc.CallOption) (*GetDeviceDefinitionResponse, error)
	GetDeviceDefinitionBySlugName(ctx context.Context, in *GetDeviceDefinitionBySlugNameRequest, opts ...grpc.CallOption) (*GetDeviceDefinitionItemResponse, error)
}

type deviceDefinitionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDeviceDefinitionServiceClient(cc grpc.ClientConnInterface) DeviceDefinitionServiceClient {
	return &deviceDefinitionServiceClient{cc}
}

func (c *deviceDefinitionServiceClient) GetDeviceDefinitionByID(ctx context.Context, in *GetDeviceDefinitionRequest, opts ...grpc.CallOption) (*GetDeviceDefinitionResponse, error) {
	out := new(GetDeviceDefinitionResponse)
	err := c.cc.Invoke(ctx, DeviceDefinitionService_GetDeviceDefinitionByID_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceDefinitionServiceClient) GetDeviceDefinitionBySlug(ctx context.Context, in *GetDeviceDefinitionBySlugRequest, opts ...grpc.CallOption) (*GetDeviceDefinitionItemResponse, error) {
	out := new(GetDeviceDefinitionItemResponse)
	err := c.cc.Invoke(ctx, DeviceDefinitionService_GetDeviceDefinitionBySlug_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceDefinitionServiceClient) GetDeviceDefinitions(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetDeviceDefinitionResponse, error) {
	out := new(GetDeviceDefinitionResponse)
	err := c.cc.Invoke(ctx, DeviceDefinitionService_GetDeviceDefinitions_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceDefinitionServiceClient) GetDevicesMMY(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetDevicesMMYResponse, error) {
	out := new(GetDevicesMMYResponse)
	err := c.cc.Invoke(ctx, DeviceDefinitionService_GetDevicesMMY_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceDefinitionServiceClient) GetDeviceDefinitionsWithHardwareTemplate(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetDevicesMMYResponse, error) {
	out := new(GetDevicesMMYResponse)
	err := c.cc.Invoke(ctx, DeviceDefinitionService_GetDeviceDefinitionsWithHardwareTemplate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceDefinitionServiceClient) GetDeviceDefinitionByMMY(ctx context.Context, in *GetDeviceDefinitionByMMYRequest, opts ...grpc.CallOption) (*GetDeviceDefinitionItemResponse, error) {
	out := new(GetDeviceDefinitionItemResponse)
	err := c.cc.Invoke(ctx, DeviceDefinitionService_GetDeviceDefinitionByMMY_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceDefinitionServiceClient) GetDeviceDefinitionBySource(ctx context.Context, in *GetDeviceDefinitionBySourceRequest, opts ...grpc.CallOption) (DeviceDefinitionService_GetDeviceDefinitionBySourceClient, error) {
	stream, err := c.cc.NewStream(ctx, &DeviceDefinitionService_ServiceDesc.Streams[0], DeviceDefinitionService_GetDeviceDefinitionBySource_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &deviceDefinitionServiceGetDeviceDefinitionBySourceClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type DeviceDefinitionService_GetDeviceDefinitionBySourceClient interface {
	Recv() (*GetDeviceDefinitionItemResponse, error)
	grpc.ClientStream
}

type deviceDefinitionServiceGetDeviceDefinitionBySourceClient struct {
	grpc.ClientStream
}

func (x *deviceDefinitionServiceGetDeviceDefinitionBySourceClient) Recv() (*GetDeviceDefinitionItemResponse, error) {
	m := new(GetDeviceDefinitionItemResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *deviceDefinitionServiceClient) GetDeviceDefinitionWithoutImages(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetDeviceDefinitionResponse, error) {
	out := new(GetDeviceDefinitionResponse)
	err := c.cc.Invoke(ctx, DeviceDefinitionService_GetDeviceDefinitionWithoutImages_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceDefinitionServiceClient) GetDeviceDefinitionAll(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetDeviceDefinitionAllResponse, error) {
	out := new(GetDeviceDefinitionAllResponse)
	err := c.cc.Invoke(ctx, DeviceDefinitionService_GetDeviceDefinitionAll_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceDefinitionServiceClient) GetDeviceMakeByName(ctx context.Context, in *GetDeviceMakeByNameRequest, opts ...grpc.CallOption) (*DeviceMake, error) {
	out := new(DeviceMake)
	err := c.cc.Invoke(ctx, DeviceDefinitionService_GetDeviceMakeByName_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceDefinitionServiceClient) GetDeviceMakeBySlug(ctx context.Context, in *GetDeviceMakeBySlugRequest, opts ...grpc.CallOption) (*DeviceMake, error) {
	out := new(DeviceMake)
	err := c.cc.Invoke(ctx, DeviceDefinitionService_GetDeviceMakeBySlug_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceDefinitionServiceClient) GetDeviceMakeByTokenID(ctx context.Context, in *GetDeviceMakeByTokenIdRequest, opts ...grpc.CallOption) (*DeviceMake, error) {
	out := new(DeviceMake)
	err := c.cc.Invoke(ctx, DeviceDefinitionService_GetDeviceMakeByTokenID_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceDefinitionServiceClient) GetDeviceMakes(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetDeviceMakeResponse, error) {
	out := new(GetDeviceMakeResponse)
	err := c.cc.Invoke(ctx, DeviceDefinitionService_GetDeviceMakes_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceDefinitionServiceClient) GetIntegrations(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetIntegrationResponse, error) {
	out := new(GetIntegrationResponse)
	err := c.cc.Invoke(ctx, DeviceDefinitionService_GetIntegrations_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceDefinitionServiceClient) GetIntegrationByID(ctx context.Context, in *GetIntegrationRequest, opts ...grpc.CallOption) (*Integration, error) {
	out := new(Integration)
	err := c.cc.Invoke(ctx, DeviceDefinitionService_GetIntegrationByID_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceDefinitionServiceClient) GetDeviceDefinitionIntegration(ctx context.Context, in *GetDeviceDefinitionIntegrationRequest, opts ...grpc.CallOption) (*GetDeviceDefinitionIntegrationResponse, error) {
	out := new(GetDeviceDefinitionIntegrationResponse)
	err := c.cc.Invoke(ctx, DeviceDefinitionService_GetDeviceDefinitionIntegration_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceDefinitionServiceClient) GetDeviceImagesByIDs(ctx context.Context, in *GetDeviceDefinitionRequest, opts ...grpc.CallOption) (*GetDeviceImagesResponse, error) {
	out := new(GetDeviceImagesResponse)
	err := c.cc.Invoke(ctx, DeviceDefinitionService_GetDeviceImagesByIDs_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceDefinitionServiceClient) CreateDeviceDefinition(ctx context.Context, in *CreateDeviceDefinitionRequest, opts ...grpc.CallOption) (*CreateDeviceDefinitionResponse, error) {
	out := new(CreateDeviceDefinitionResponse)
	err := c.cc.Invoke(ctx, DeviceDefinitionService_CreateDeviceDefinition_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceDefinitionServiceClient) CreateDeviceIntegration(ctx context.Context, in *CreateDeviceIntegrationRequest, opts ...grpc.CallOption) (*BaseResponse, error) {
	out := new(BaseResponse)
	err := c.cc.Invoke(ctx, DeviceDefinitionService_CreateDeviceIntegration_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceDefinitionServiceClient) CreateDeviceStyle(ctx context.Context, in *CreateDeviceStyleRequest, opts ...grpc.CallOption) (*BaseResponse, error) {
	out := new(BaseResponse)
	err := c.cc.Invoke(ctx, DeviceDefinitionService_CreateDeviceStyle_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceDefinitionServiceClient) CreateDeviceMake(ctx context.Context, in *CreateDeviceMakeRequest, opts ...grpc.CallOption) (*BaseResponse, error) {
	out := new(BaseResponse)
	err := c.cc.Invoke(ctx, DeviceDefinitionService_CreateDeviceMake_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceDefinitionServiceClient) CreateIntegration(ctx context.Context, in *CreateIntegrationRequest, opts ...grpc.CallOption) (*BaseResponse, error) {
	out := new(BaseResponse)
	err := c.cc.Invoke(ctx, DeviceDefinitionService_CreateIntegration_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceDefinitionServiceClient) UpdateDeviceDefinition(ctx context.Context, in *UpdateDeviceDefinitionRequest, opts ...grpc.CallOption) (*BaseResponse, error) {
	out := new(BaseResponse)
	err := c.cc.Invoke(ctx, DeviceDefinitionService_UpdateDeviceDefinition_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceDefinitionServiceClient) SetDeviceDefinitionImage(ctx context.Context, in *UpdateDeviceDefinitionImageRequest, opts ...grpc.CallOption) (*BaseResponse, error) {
	out := new(BaseResponse)
	err := c.cc.Invoke(ctx, DeviceDefinitionService_SetDeviceDefinitionImage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceDefinitionServiceClient) GetFilteredDeviceDefinition(ctx context.Context, in *FilterDeviceDefinitionRequest, opts ...grpc.CallOption) (*GetFilteredDeviceDefinitionsResponse, error) {
	out := new(GetFilteredDeviceDefinitionsResponse)
	err := c.cc.Invoke(ctx, DeviceDefinitionService_GetFilteredDeviceDefinition_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceDefinitionServiceClient) GetDeviceStyleByID(ctx context.Context, in *GetDeviceStyleByIDRequest, opts ...grpc.CallOption) (*DeviceStyle, error) {
	out := new(DeviceStyle)
	err := c.cc.Invoke(ctx, DeviceDefinitionService_GetDeviceStyleByID_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceDefinitionServiceClient) GetDeviceStyleByExternalID(ctx context.Context, in *GetDeviceStyleByIDRequest, opts ...grpc.CallOption) (*DeviceStyle, error) {
	out := new(DeviceStyle)
	err := c.cc.Invoke(ctx, DeviceDefinitionService_GetDeviceStyleByExternalID_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceDefinitionServiceClient) GetDeviceStylesByDeviceDefinitionID(ctx context.Context, in *GetDeviceStyleByDeviceDefinitionIDRequest, opts ...grpc.CallOption) (*GetDeviceStyleResponse, error) {
	out := new(GetDeviceStyleResponse)
	err := c.cc.Invoke(ctx, DeviceDefinitionService_GetDeviceStylesByDeviceDefinitionID_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceDefinitionServiceClient) GetDeviceStylesByFilter(ctx context.Context, in *GetDeviceStyleFilterRequest, opts ...grpc.CallOption) (*GetDeviceStyleResponse, error) {
	out := new(GetDeviceStyleResponse)
	err := c.cc.Invoke(ctx, DeviceDefinitionService_GetDeviceStylesByFilter_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceDefinitionServiceClient) UpdateDeviceMake(ctx context.Context, in *UpdateDeviceMakeRequest, opts ...grpc.CallOption) (*BaseResponse, error) {
	out := new(BaseResponse)
	err := c.cc.Invoke(ctx, DeviceDefinitionService_UpdateDeviceMake_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceDefinitionServiceClient) UpdateDeviceStyle(ctx context.Context, in *UpdateDeviceStyleRequest, opts ...grpc.CallOption) (*BaseResponse, error) {
	out := new(BaseResponse)
	err := c.cc.Invoke(ctx, DeviceDefinitionService_UpdateDeviceStyle_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceDefinitionServiceClient) GetDeviceTypesByID(ctx context.Context, in *GetDeviceTypeByIDRequest, opts ...grpc.CallOption) (*GetDeviceTypeResponse, error) {
	out := new(GetDeviceTypeResponse)
	err := c.cc.Invoke(ctx, DeviceDefinitionService_GetDeviceTypesByID_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceDefinitionServiceClient) GetDeviceTypes(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetDeviceTypeListResponse, error) {
	out := new(GetDeviceTypeListResponse)
	err := c.cc.Invoke(ctx, DeviceDefinitionService_GetDeviceTypes_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceDefinitionServiceClient) CreateDeviceType(ctx context.Context, in *CreateDeviceTypeRequest, opts ...grpc.CallOption) (*BaseResponse, error) {
	out := new(BaseResponse)
	err := c.cc.Invoke(ctx, DeviceDefinitionService_CreateDeviceType_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceDefinitionServiceClient) UpdateDeviceType(ctx context.Context, in *UpdateDeviceTypeRequest, opts ...grpc.CallOption) (*BaseResponse, error) {
	out := new(BaseResponse)
	err := c.cc.Invoke(ctx, DeviceDefinitionService_UpdateDeviceType_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceDefinitionServiceClient) DeleteDeviceType(ctx context.Context, in *DeleteDeviceTypeRequest, opts ...grpc.CallOption) (*BaseResponse, error) {
	out := new(BaseResponse)
	err := c.cc.Invoke(ctx, DeviceDefinitionService_DeleteDeviceType_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceDefinitionServiceClient) GetDeviceDefinitionHardwareTemplateByID(ctx context.Context, in *GetDeviceDefinitionHardwareTemplateByIDRequest, opts ...grpc.CallOption) (*GetDeviceDefinitionHardwareTemplateByIDResponse, error) {
	out := new(GetDeviceDefinitionHardwareTemplateByIDResponse)
	err := c.cc.Invoke(ctx, DeviceDefinitionService_GetDeviceDefinitionHardwareTemplateByID_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceDefinitionServiceClient) SyncDeviceDefinitionsWithElasticSearch(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*SyncStatusResult, error) {
	out := new(SyncStatusResult)
	err := c.cc.Invoke(ctx, DeviceDefinitionService_SyncDeviceDefinitionsWithElasticSearch_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceDefinitionServiceClient) GetIntegrationByTokenID(ctx context.Context, in *GetIntegrationByTokenIDRequest, opts ...grpc.CallOption) (*Integration, error) {
	out := new(Integration)
	err := c.cc.Invoke(ctx, DeviceDefinitionService_GetIntegrationByTokenID_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceDefinitionServiceClient) GetDeviceDefinitionByMakeAndYearRange(ctx context.Context, in *GetDeviceDefinitionByMakeAndYearRangeRequest, opts ...grpc.CallOption) (*GetDeviceDefinitionResponse, error) {
	out := new(GetDeviceDefinitionResponse)
	err := c.cc.Invoke(ctx, DeviceDefinitionService_GetDeviceDefinitionByMakeAndYearRange_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceDefinitionServiceClient) GetDeviceDefinitionOnChainByID(ctx context.Context, in *GetDeviceDefinitionRequest, opts ...grpc.CallOption) (*GetDeviceDefinitionResponse, error) {
	out := new(GetDeviceDefinitionResponse)
	err := c.cc.Invoke(ctx, DeviceDefinitionService_GetDeviceDefinitionOnChainByID_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceDefinitionServiceClient) GetDeviceDefinitionsOnChain(ctx context.Context, in *FilterDeviceDefinitionRequest, opts ...grpc.CallOption) (*GetDeviceDefinitionResponse, error) {
	out := new(GetDeviceDefinitionResponse)
	err := c.cc.Invoke(ctx, DeviceDefinitionService_GetDeviceDefinitionsOnChain_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceDefinitionServiceClient) GetDeviceDefinitionBySlugName(ctx context.Context, in *GetDeviceDefinitionBySlugNameRequest, opts ...grpc.CallOption) (*GetDeviceDefinitionItemResponse, error) {
	out := new(GetDeviceDefinitionItemResponse)
	err := c.cc.Invoke(ctx, DeviceDefinitionService_GetDeviceDefinitionBySlugName_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DeviceDefinitionServiceServer is the server API for DeviceDefinitionService service.
// All implementations must embed UnimplementedDeviceDefinitionServiceServer
// for forward compatibility
type DeviceDefinitionServiceServer interface {
	GetDeviceDefinitionByID(context.Context, *GetDeviceDefinitionRequest) (*GetDeviceDefinitionResponse, error)
	GetDeviceDefinitionBySlug(context.Context, *GetDeviceDefinitionBySlugRequest) (*GetDeviceDefinitionItemResponse, error)
	GetDeviceDefinitions(context.Context, *emptypb.Empty) (*GetDeviceDefinitionResponse, error)
	GetDevicesMMY(context.Context, *emptypb.Empty) (*GetDevicesMMYResponse, error)
	GetDeviceDefinitionsWithHardwareTemplate(context.Context, *emptypb.Empty) (*GetDevicesMMYResponse, error)
	GetDeviceDefinitionByMMY(context.Context, *GetDeviceDefinitionByMMYRequest) (*GetDeviceDefinitionItemResponse, error)
	GetDeviceDefinitionBySource(*GetDeviceDefinitionBySourceRequest, DeviceDefinitionService_GetDeviceDefinitionBySourceServer) error
	GetDeviceDefinitionWithoutImages(context.Context, *emptypb.Empty) (*GetDeviceDefinitionResponse, error)
	GetDeviceDefinitionAll(context.Context, *emptypb.Empty) (*GetDeviceDefinitionAllResponse, error)
	GetDeviceMakeByName(context.Context, *GetDeviceMakeByNameRequest) (*DeviceMake, error)
	GetDeviceMakeBySlug(context.Context, *GetDeviceMakeBySlugRequest) (*DeviceMake, error)
	GetDeviceMakeByTokenID(context.Context, *GetDeviceMakeByTokenIdRequest) (*DeviceMake, error)
	GetDeviceMakes(context.Context, *emptypb.Empty) (*GetDeviceMakeResponse, error)
	GetIntegrations(context.Context, *emptypb.Empty) (*GetIntegrationResponse, error)
	GetIntegrationByID(context.Context, *GetIntegrationRequest) (*Integration, error)
	GetDeviceDefinitionIntegration(context.Context, *GetDeviceDefinitionIntegrationRequest) (*GetDeviceDefinitionIntegrationResponse, error)
	GetDeviceImagesByIDs(context.Context, *GetDeviceDefinitionRequest) (*GetDeviceImagesResponse, error)
	CreateDeviceDefinition(context.Context, *CreateDeviceDefinitionRequest) (*CreateDeviceDefinitionResponse, error)
	CreateDeviceIntegration(context.Context, *CreateDeviceIntegrationRequest) (*BaseResponse, error)
	CreateDeviceStyle(context.Context, *CreateDeviceStyleRequest) (*BaseResponse, error)
	CreateDeviceMake(context.Context, *CreateDeviceMakeRequest) (*BaseResponse, error)
	CreateIntegration(context.Context, *CreateIntegrationRequest) (*BaseResponse, error)
	UpdateDeviceDefinition(context.Context, *UpdateDeviceDefinitionRequest) (*BaseResponse, error)
	SetDeviceDefinitionImage(context.Context, *UpdateDeviceDefinitionImageRequest) (*BaseResponse, error)
	GetFilteredDeviceDefinition(context.Context, *FilterDeviceDefinitionRequest) (*GetFilteredDeviceDefinitionsResponse, error)
	GetDeviceStyleByID(context.Context, *GetDeviceStyleByIDRequest) (*DeviceStyle, error)
	GetDeviceStyleByExternalID(context.Context, *GetDeviceStyleByIDRequest) (*DeviceStyle, error)
	GetDeviceStylesByDeviceDefinitionID(context.Context, *GetDeviceStyleByDeviceDefinitionIDRequest) (*GetDeviceStyleResponse, error)
	GetDeviceStylesByFilter(context.Context, *GetDeviceStyleFilterRequest) (*GetDeviceStyleResponse, error)
	UpdateDeviceMake(context.Context, *UpdateDeviceMakeRequest) (*BaseResponse, error)
	UpdateDeviceStyle(context.Context, *UpdateDeviceStyleRequest) (*BaseResponse, error)
	GetDeviceTypesByID(context.Context, *GetDeviceTypeByIDRequest) (*GetDeviceTypeResponse, error)
	GetDeviceTypes(context.Context, *emptypb.Empty) (*GetDeviceTypeListResponse, error)
	CreateDeviceType(context.Context, *CreateDeviceTypeRequest) (*BaseResponse, error)
	UpdateDeviceType(context.Context, *UpdateDeviceTypeRequest) (*BaseResponse, error)
	DeleteDeviceType(context.Context, *DeleteDeviceTypeRequest) (*BaseResponse, error)
	GetDeviceDefinitionHardwareTemplateByID(context.Context, *GetDeviceDefinitionHardwareTemplateByIDRequest) (*GetDeviceDefinitionHardwareTemplateByIDResponse, error)
	SyncDeviceDefinitionsWithElasticSearch(context.Context, *emptypb.Empty) (*SyncStatusResult, error)
	GetIntegrationByTokenID(context.Context, *GetIntegrationByTokenIDRequest) (*Integration, error)
	GetDeviceDefinitionByMakeAndYearRange(context.Context, *GetDeviceDefinitionByMakeAndYearRangeRequest) (*GetDeviceDefinitionResponse, error)
	GetDeviceDefinitionOnChainByID(context.Context, *GetDeviceDefinitionRequest) (*GetDeviceDefinitionResponse, error)
	GetDeviceDefinitionsOnChain(context.Context, *FilterDeviceDefinitionRequest) (*GetDeviceDefinitionResponse, error)
	GetDeviceDefinitionBySlugName(context.Context, *GetDeviceDefinitionBySlugNameRequest) (*GetDeviceDefinitionItemResponse, error)
	mustEmbedUnimplementedDeviceDefinitionServiceServer()
}

// UnimplementedDeviceDefinitionServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDeviceDefinitionServiceServer struct {
}

func (UnimplementedDeviceDefinitionServiceServer) GetDeviceDefinitionByID(context.Context, *GetDeviceDefinitionRequest) (*GetDeviceDefinitionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDeviceDefinitionByID not implemented")
}
func (UnimplementedDeviceDefinitionServiceServer) GetDeviceDefinitionBySlug(context.Context, *GetDeviceDefinitionBySlugRequest) (*GetDeviceDefinitionItemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDeviceDefinitionBySlug not implemented")
}
func (UnimplementedDeviceDefinitionServiceServer) GetDeviceDefinitions(context.Context, *emptypb.Empty) (*GetDeviceDefinitionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDeviceDefinitions not implemented")
}
func (UnimplementedDeviceDefinitionServiceServer) GetDevicesMMY(context.Context, *emptypb.Empty) (*GetDevicesMMYResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDevicesMMY not implemented")
}
func (UnimplementedDeviceDefinitionServiceServer) GetDeviceDefinitionsWithHardwareTemplate(context.Context, *emptypb.Empty) (*GetDevicesMMYResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDeviceDefinitionsWithHardwareTemplate not implemented")
}
func (UnimplementedDeviceDefinitionServiceServer) GetDeviceDefinitionByMMY(context.Context, *GetDeviceDefinitionByMMYRequest) (*GetDeviceDefinitionItemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDeviceDefinitionByMMY not implemented")
}
func (UnimplementedDeviceDefinitionServiceServer) GetDeviceDefinitionBySource(*GetDeviceDefinitionBySourceRequest, DeviceDefinitionService_GetDeviceDefinitionBySourceServer) error {
	return status.Errorf(codes.Unimplemented, "method GetDeviceDefinitionBySource not implemented")
}
func (UnimplementedDeviceDefinitionServiceServer) GetDeviceDefinitionWithoutImages(context.Context, *emptypb.Empty) (*GetDeviceDefinitionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDeviceDefinitionWithoutImages not implemented")
}
func (UnimplementedDeviceDefinitionServiceServer) GetDeviceDefinitionAll(context.Context, *emptypb.Empty) (*GetDeviceDefinitionAllResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDeviceDefinitionAll not implemented")
}
func (UnimplementedDeviceDefinitionServiceServer) GetDeviceMakeByName(context.Context, *GetDeviceMakeByNameRequest) (*DeviceMake, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDeviceMakeByName not implemented")
}
func (UnimplementedDeviceDefinitionServiceServer) GetDeviceMakeBySlug(context.Context, *GetDeviceMakeBySlugRequest) (*DeviceMake, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDeviceMakeBySlug not implemented")
}
func (UnimplementedDeviceDefinitionServiceServer) GetDeviceMakeByTokenID(context.Context, *GetDeviceMakeByTokenIdRequest) (*DeviceMake, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDeviceMakeByTokenID not implemented")
}
func (UnimplementedDeviceDefinitionServiceServer) GetDeviceMakes(context.Context, *emptypb.Empty) (*GetDeviceMakeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDeviceMakes not implemented")
}
func (UnimplementedDeviceDefinitionServiceServer) GetIntegrations(context.Context, *emptypb.Empty) (*GetIntegrationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIntegrations not implemented")
}
func (UnimplementedDeviceDefinitionServiceServer) GetIntegrationByID(context.Context, *GetIntegrationRequest) (*Integration, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIntegrationByID not implemented")
}
func (UnimplementedDeviceDefinitionServiceServer) GetDeviceDefinitionIntegration(context.Context, *GetDeviceDefinitionIntegrationRequest) (*GetDeviceDefinitionIntegrationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDeviceDefinitionIntegration not implemented")
}
func (UnimplementedDeviceDefinitionServiceServer) GetDeviceImagesByIDs(context.Context, *GetDeviceDefinitionRequest) (*GetDeviceImagesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDeviceImagesByIDs not implemented")
}
func (UnimplementedDeviceDefinitionServiceServer) CreateDeviceDefinition(context.Context, *CreateDeviceDefinitionRequest) (*CreateDeviceDefinitionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDeviceDefinition not implemented")
}
func (UnimplementedDeviceDefinitionServiceServer) CreateDeviceIntegration(context.Context, *CreateDeviceIntegrationRequest) (*BaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDeviceIntegration not implemented")
}
func (UnimplementedDeviceDefinitionServiceServer) CreateDeviceStyle(context.Context, *CreateDeviceStyleRequest) (*BaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDeviceStyle not implemented")
}
func (UnimplementedDeviceDefinitionServiceServer) CreateDeviceMake(context.Context, *CreateDeviceMakeRequest) (*BaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDeviceMake not implemented")
}
func (UnimplementedDeviceDefinitionServiceServer) CreateIntegration(context.Context, *CreateIntegrationRequest) (*BaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateIntegration not implemented")
}
func (UnimplementedDeviceDefinitionServiceServer) UpdateDeviceDefinition(context.Context, *UpdateDeviceDefinitionRequest) (*BaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDeviceDefinition not implemented")
}
func (UnimplementedDeviceDefinitionServiceServer) SetDeviceDefinitionImage(context.Context, *UpdateDeviceDefinitionImageRequest) (*BaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetDeviceDefinitionImage not implemented")
}
func (UnimplementedDeviceDefinitionServiceServer) GetFilteredDeviceDefinition(context.Context, *FilterDeviceDefinitionRequest) (*GetFilteredDeviceDefinitionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFilteredDeviceDefinition not implemented")
}
func (UnimplementedDeviceDefinitionServiceServer) GetDeviceStyleByID(context.Context, *GetDeviceStyleByIDRequest) (*DeviceStyle, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDeviceStyleByID not implemented")
}
func (UnimplementedDeviceDefinitionServiceServer) GetDeviceStyleByExternalID(context.Context, *GetDeviceStyleByIDRequest) (*DeviceStyle, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDeviceStyleByExternalID not implemented")
}
func (UnimplementedDeviceDefinitionServiceServer) GetDeviceStylesByDeviceDefinitionID(context.Context, *GetDeviceStyleByDeviceDefinitionIDRequest) (*GetDeviceStyleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDeviceStylesByDeviceDefinitionID not implemented")
}
func (UnimplementedDeviceDefinitionServiceServer) GetDeviceStylesByFilter(context.Context, *GetDeviceStyleFilterRequest) (*GetDeviceStyleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDeviceStylesByFilter not implemented")
}
func (UnimplementedDeviceDefinitionServiceServer) UpdateDeviceMake(context.Context, *UpdateDeviceMakeRequest) (*BaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDeviceMake not implemented")
}
func (UnimplementedDeviceDefinitionServiceServer) UpdateDeviceStyle(context.Context, *UpdateDeviceStyleRequest) (*BaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDeviceStyle not implemented")
}
func (UnimplementedDeviceDefinitionServiceServer) GetDeviceTypesByID(context.Context, *GetDeviceTypeByIDRequest) (*GetDeviceTypeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDeviceTypesByID not implemented")
}
func (UnimplementedDeviceDefinitionServiceServer) GetDeviceTypes(context.Context, *emptypb.Empty) (*GetDeviceTypeListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDeviceTypes not implemented")
}
func (UnimplementedDeviceDefinitionServiceServer) CreateDeviceType(context.Context, *CreateDeviceTypeRequest) (*BaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDeviceType not implemented")
}
func (UnimplementedDeviceDefinitionServiceServer) UpdateDeviceType(context.Context, *UpdateDeviceTypeRequest) (*BaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDeviceType not implemented")
}
func (UnimplementedDeviceDefinitionServiceServer) DeleteDeviceType(context.Context, *DeleteDeviceTypeRequest) (*BaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDeviceType not implemented")
}
func (UnimplementedDeviceDefinitionServiceServer) GetDeviceDefinitionHardwareTemplateByID(context.Context, *GetDeviceDefinitionHardwareTemplateByIDRequest) (*GetDeviceDefinitionHardwareTemplateByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDeviceDefinitionHardwareTemplateByID not implemented")
}
func (UnimplementedDeviceDefinitionServiceServer) SyncDeviceDefinitionsWithElasticSearch(context.Context, *emptypb.Empty) (*SyncStatusResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SyncDeviceDefinitionsWithElasticSearch not implemented")
}
func (UnimplementedDeviceDefinitionServiceServer) GetIntegrationByTokenID(context.Context, *GetIntegrationByTokenIDRequest) (*Integration, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIntegrationByTokenID not implemented")
}
func (UnimplementedDeviceDefinitionServiceServer) GetDeviceDefinitionByMakeAndYearRange(context.Context, *GetDeviceDefinitionByMakeAndYearRangeRequest) (*GetDeviceDefinitionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDeviceDefinitionByMakeAndYearRange not implemented")
}
func (UnimplementedDeviceDefinitionServiceServer) GetDeviceDefinitionOnChainByID(context.Context, *GetDeviceDefinitionRequest) (*GetDeviceDefinitionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDeviceDefinitionOnChainByID not implemented")
}
func (UnimplementedDeviceDefinitionServiceServer) GetDeviceDefinitionsOnChain(context.Context, *FilterDeviceDefinitionRequest) (*GetDeviceDefinitionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDeviceDefinitionsOnChain not implemented")
}
func (UnimplementedDeviceDefinitionServiceServer) GetDeviceDefinitionBySlugName(context.Context, *GetDeviceDefinitionBySlugNameRequest) (*GetDeviceDefinitionItemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDeviceDefinitionBySlugName not implemented")
}
func (UnimplementedDeviceDefinitionServiceServer) mustEmbedUnimplementedDeviceDefinitionServiceServer() {
}

// UnsafeDeviceDefinitionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DeviceDefinitionServiceServer will
// result in compilation errors.
type UnsafeDeviceDefinitionServiceServer interface {
	mustEmbedUnimplementedDeviceDefinitionServiceServer()
}

func RegisterDeviceDefinitionServiceServer(s grpc.ServiceRegistrar, srv DeviceDefinitionServiceServer) {
	s.RegisterService(&DeviceDefinitionService_ServiceDesc, srv)
}

func _DeviceDefinitionService_GetDeviceDefinitionByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDeviceDefinitionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceDefinitionServiceServer).GetDeviceDefinitionByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceDefinitionService_GetDeviceDefinitionByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceDefinitionServiceServer).GetDeviceDefinitionByID(ctx, req.(*GetDeviceDefinitionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceDefinitionService_GetDeviceDefinitionBySlug_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDeviceDefinitionBySlugRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceDefinitionServiceServer).GetDeviceDefinitionBySlug(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceDefinitionService_GetDeviceDefinitionBySlug_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceDefinitionServiceServer).GetDeviceDefinitionBySlug(ctx, req.(*GetDeviceDefinitionBySlugRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceDefinitionService_GetDeviceDefinitions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceDefinitionServiceServer).GetDeviceDefinitions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceDefinitionService_GetDeviceDefinitions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceDefinitionServiceServer).GetDeviceDefinitions(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceDefinitionService_GetDevicesMMY_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceDefinitionServiceServer).GetDevicesMMY(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceDefinitionService_GetDevicesMMY_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceDefinitionServiceServer).GetDevicesMMY(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceDefinitionService_GetDeviceDefinitionsWithHardwareTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceDefinitionServiceServer).GetDeviceDefinitionsWithHardwareTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceDefinitionService_GetDeviceDefinitionsWithHardwareTemplate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceDefinitionServiceServer).GetDeviceDefinitionsWithHardwareTemplate(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceDefinitionService_GetDeviceDefinitionByMMY_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDeviceDefinitionByMMYRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceDefinitionServiceServer).GetDeviceDefinitionByMMY(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceDefinitionService_GetDeviceDefinitionByMMY_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceDefinitionServiceServer).GetDeviceDefinitionByMMY(ctx, req.(*GetDeviceDefinitionByMMYRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceDefinitionService_GetDeviceDefinitionBySource_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetDeviceDefinitionBySourceRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DeviceDefinitionServiceServer).GetDeviceDefinitionBySource(m, &deviceDefinitionServiceGetDeviceDefinitionBySourceServer{stream})
}

type DeviceDefinitionService_GetDeviceDefinitionBySourceServer interface {
	Send(*GetDeviceDefinitionItemResponse) error
	grpc.ServerStream
}

type deviceDefinitionServiceGetDeviceDefinitionBySourceServer struct {
	grpc.ServerStream
}

func (x *deviceDefinitionServiceGetDeviceDefinitionBySourceServer) Send(m *GetDeviceDefinitionItemResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _DeviceDefinitionService_GetDeviceDefinitionWithoutImages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceDefinitionServiceServer).GetDeviceDefinitionWithoutImages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceDefinitionService_GetDeviceDefinitionWithoutImages_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceDefinitionServiceServer).GetDeviceDefinitionWithoutImages(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceDefinitionService_GetDeviceDefinitionAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceDefinitionServiceServer).GetDeviceDefinitionAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceDefinitionService_GetDeviceDefinitionAll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceDefinitionServiceServer).GetDeviceDefinitionAll(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceDefinitionService_GetDeviceMakeByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDeviceMakeByNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceDefinitionServiceServer).GetDeviceMakeByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceDefinitionService_GetDeviceMakeByName_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceDefinitionServiceServer).GetDeviceMakeByName(ctx, req.(*GetDeviceMakeByNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceDefinitionService_GetDeviceMakeBySlug_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDeviceMakeBySlugRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceDefinitionServiceServer).GetDeviceMakeBySlug(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceDefinitionService_GetDeviceMakeBySlug_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceDefinitionServiceServer).GetDeviceMakeBySlug(ctx, req.(*GetDeviceMakeBySlugRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceDefinitionService_GetDeviceMakeByTokenID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDeviceMakeByTokenIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceDefinitionServiceServer).GetDeviceMakeByTokenID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceDefinitionService_GetDeviceMakeByTokenID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceDefinitionServiceServer).GetDeviceMakeByTokenID(ctx, req.(*GetDeviceMakeByTokenIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceDefinitionService_GetDeviceMakes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceDefinitionServiceServer).GetDeviceMakes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceDefinitionService_GetDeviceMakes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceDefinitionServiceServer).GetDeviceMakes(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceDefinitionService_GetIntegrations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceDefinitionServiceServer).GetIntegrations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceDefinitionService_GetIntegrations_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceDefinitionServiceServer).GetIntegrations(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceDefinitionService_GetIntegrationByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetIntegrationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceDefinitionServiceServer).GetIntegrationByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceDefinitionService_GetIntegrationByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceDefinitionServiceServer).GetIntegrationByID(ctx, req.(*GetIntegrationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceDefinitionService_GetDeviceDefinitionIntegration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDeviceDefinitionIntegrationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceDefinitionServiceServer).GetDeviceDefinitionIntegration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceDefinitionService_GetDeviceDefinitionIntegration_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceDefinitionServiceServer).GetDeviceDefinitionIntegration(ctx, req.(*GetDeviceDefinitionIntegrationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceDefinitionService_GetDeviceImagesByIDs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDeviceDefinitionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceDefinitionServiceServer).GetDeviceImagesByIDs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceDefinitionService_GetDeviceImagesByIDs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceDefinitionServiceServer).GetDeviceImagesByIDs(ctx, req.(*GetDeviceDefinitionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceDefinitionService_CreateDeviceDefinition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDeviceDefinitionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceDefinitionServiceServer).CreateDeviceDefinition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceDefinitionService_CreateDeviceDefinition_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceDefinitionServiceServer).CreateDeviceDefinition(ctx, req.(*CreateDeviceDefinitionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceDefinitionService_CreateDeviceIntegration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDeviceIntegrationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceDefinitionServiceServer).CreateDeviceIntegration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceDefinitionService_CreateDeviceIntegration_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceDefinitionServiceServer).CreateDeviceIntegration(ctx, req.(*CreateDeviceIntegrationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceDefinitionService_CreateDeviceStyle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDeviceStyleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceDefinitionServiceServer).CreateDeviceStyle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceDefinitionService_CreateDeviceStyle_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceDefinitionServiceServer).CreateDeviceStyle(ctx, req.(*CreateDeviceStyleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceDefinitionService_CreateDeviceMake_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDeviceMakeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceDefinitionServiceServer).CreateDeviceMake(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceDefinitionService_CreateDeviceMake_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceDefinitionServiceServer).CreateDeviceMake(ctx, req.(*CreateDeviceMakeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceDefinitionService_CreateIntegration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateIntegrationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceDefinitionServiceServer).CreateIntegration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceDefinitionService_CreateIntegration_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceDefinitionServiceServer).CreateIntegration(ctx, req.(*CreateIntegrationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceDefinitionService_UpdateDeviceDefinition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDeviceDefinitionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceDefinitionServiceServer).UpdateDeviceDefinition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceDefinitionService_UpdateDeviceDefinition_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceDefinitionServiceServer).UpdateDeviceDefinition(ctx, req.(*UpdateDeviceDefinitionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceDefinitionService_SetDeviceDefinitionImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDeviceDefinitionImageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceDefinitionServiceServer).SetDeviceDefinitionImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceDefinitionService_SetDeviceDefinitionImage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceDefinitionServiceServer).SetDeviceDefinitionImage(ctx, req.(*UpdateDeviceDefinitionImageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceDefinitionService_GetFilteredDeviceDefinition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FilterDeviceDefinitionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceDefinitionServiceServer).GetFilteredDeviceDefinition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceDefinitionService_GetFilteredDeviceDefinition_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceDefinitionServiceServer).GetFilteredDeviceDefinition(ctx, req.(*FilterDeviceDefinitionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceDefinitionService_GetDeviceStyleByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDeviceStyleByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceDefinitionServiceServer).GetDeviceStyleByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceDefinitionService_GetDeviceStyleByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceDefinitionServiceServer).GetDeviceStyleByID(ctx, req.(*GetDeviceStyleByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceDefinitionService_GetDeviceStyleByExternalID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDeviceStyleByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceDefinitionServiceServer).GetDeviceStyleByExternalID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceDefinitionService_GetDeviceStyleByExternalID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceDefinitionServiceServer).GetDeviceStyleByExternalID(ctx, req.(*GetDeviceStyleByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceDefinitionService_GetDeviceStylesByDeviceDefinitionID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDeviceStyleByDeviceDefinitionIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceDefinitionServiceServer).GetDeviceStylesByDeviceDefinitionID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceDefinitionService_GetDeviceStylesByDeviceDefinitionID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceDefinitionServiceServer).GetDeviceStylesByDeviceDefinitionID(ctx, req.(*GetDeviceStyleByDeviceDefinitionIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceDefinitionService_GetDeviceStylesByFilter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDeviceStyleFilterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceDefinitionServiceServer).GetDeviceStylesByFilter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceDefinitionService_GetDeviceStylesByFilter_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceDefinitionServiceServer).GetDeviceStylesByFilter(ctx, req.(*GetDeviceStyleFilterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceDefinitionService_UpdateDeviceMake_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDeviceMakeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceDefinitionServiceServer).UpdateDeviceMake(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceDefinitionService_UpdateDeviceMake_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceDefinitionServiceServer).UpdateDeviceMake(ctx, req.(*UpdateDeviceMakeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceDefinitionService_UpdateDeviceStyle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDeviceStyleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceDefinitionServiceServer).UpdateDeviceStyle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceDefinitionService_UpdateDeviceStyle_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceDefinitionServiceServer).UpdateDeviceStyle(ctx, req.(*UpdateDeviceStyleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceDefinitionService_GetDeviceTypesByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDeviceTypeByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceDefinitionServiceServer).GetDeviceTypesByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceDefinitionService_GetDeviceTypesByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceDefinitionServiceServer).GetDeviceTypesByID(ctx, req.(*GetDeviceTypeByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceDefinitionService_GetDeviceTypes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceDefinitionServiceServer).GetDeviceTypes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceDefinitionService_GetDeviceTypes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceDefinitionServiceServer).GetDeviceTypes(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceDefinitionService_CreateDeviceType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDeviceTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceDefinitionServiceServer).CreateDeviceType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceDefinitionService_CreateDeviceType_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceDefinitionServiceServer).CreateDeviceType(ctx, req.(*CreateDeviceTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceDefinitionService_UpdateDeviceType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDeviceTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceDefinitionServiceServer).UpdateDeviceType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceDefinitionService_UpdateDeviceType_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceDefinitionServiceServer).UpdateDeviceType(ctx, req.(*UpdateDeviceTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceDefinitionService_DeleteDeviceType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDeviceTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceDefinitionServiceServer).DeleteDeviceType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceDefinitionService_DeleteDeviceType_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceDefinitionServiceServer).DeleteDeviceType(ctx, req.(*DeleteDeviceTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceDefinitionService_GetDeviceDefinitionHardwareTemplateByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDeviceDefinitionHardwareTemplateByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceDefinitionServiceServer).GetDeviceDefinitionHardwareTemplateByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceDefinitionService_GetDeviceDefinitionHardwareTemplateByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceDefinitionServiceServer).GetDeviceDefinitionHardwareTemplateByID(ctx, req.(*GetDeviceDefinitionHardwareTemplateByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceDefinitionService_SyncDeviceDefinitionsWithElasticSearch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceDefinitionServiceServer).SyncDeviceDefinitionsWithElasticSearch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceDefinitionService_SyncDeviceDefinitionsWithElasticSearch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceDefinitionServiceServer).SyncDeviceDefinitionsWithElasticSearch(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceDefinitionService_GetIntegrationByTokenID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetIntegrationByTokenIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceDefinitionServiceServer).GetIntegrationByTokenID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceDefinitionService_GetIntegrationByTokenID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceDefinitionServiceServer).GetIntegrationByTokenID(ctx, req.(*GetIntegrationByTokenIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceDefinitionService_GetDeviceDefinitionByMakeAndYearRange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDeviceDefinitionByMakeAndYearRangeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceDefinitionServiceServer).GetDeviceDefinitionByMakeAndYearRange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceDefinitionService_GetDeviceDefinitionByMakeAndYearRange_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceDefinitionServiceServer).GetDeviceDefinitionByMakeAndYearRange(ctx, req.(*GetDeviceDefinitionByMakeAndYearRangeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceDefinitionService_GetDeviceDefinitionOnChainByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDeviceDefinitionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceDefinitionServiceServer).GetDeviceDefinitionOnChainByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceDefinitionService_GetDeviceDefinitionOnChainByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceDefinitionServiceServer).GetDeviceDefinitionOnChainByID(ctx, req.(*GetDeviceDefinitionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceDefinitionService_GetDeviceDefinitionsOnChain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FilterDeviceDefinitionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceDefinitionServiceServer).GetDeviceDefinitionsOnChain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceDefinitionService_GetDeviceDefinitionsOnChain_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceDefinitionServiceServer).GetDeviceDefinitionsOnChain(ctx, req.(*FilterDeviceDefinitionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceDefinitionService_GetDeviceDefinitionBySlugName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDeviceDefinitionBySlugNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceDefinitionServiceServer).GetDeviceDefinitionBySlugName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceDefinitionService_GetDeviceDefinitionBySlugName_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceDefinitionServiceServer).GetDeviceDefinitionBySlugName(ctx, req.(*GetDeviceDefinitionBySlugNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DeviceDefinitionService_ServiceDesc is the grpc.ServiceDesc for DeviceDefinitionService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DeviceDefinitionService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpc.DeviceDefinitionService",
	HandlerType: (*DeviceDefinitionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetDeviceDefinitionByID",
			Handler:    _DeviceDefinitionService_GetDeviceDefinitionByID_Handler,
		},
		{
			MethodName: "GetDeviceDefinitionBySlug",
			Handler:    _DeviceDefinitionService_GetDeviceDefinitionBySlug_Handler,
		},
		{
			MethodName: "GetDeviceDefinitions",
			Handler:    _DeviceDefinitionService_GetDeviceDefinitions_Handler,
		},
		{
			MethodName: "GetDevicesMMY",
			Handler:    _DeviceDefinitionService_GetDevicesMMY_Handler,
		},
		{
			MethodName: "GetDeviceDefinitionsWithHardwareTemplate",
			Handler:    _DeviceDefinitionService_GetDeviceDefinitionsWithHardwareTemplate_Handler,
		},
		{
			MethodName: "GetDeviceDefinitionByMMY",
			Handler:    _DeviceDefinitionService_GetDeviceDefinitionByMMY_Handler,
		},
		{
			MethodName: "GetDeviceDefinitionWithoutImages",
			Handler:    _DeviceDefinitionService_GetDeviceDefinitionWithoutImages_Handler,
		},
		{
			MethodName: "GetDeviceDefinitionAll",
			Handler:    _DeviceDefinitionService_GetDeviceDefinitionAll_Handler,
		},
		{
			MethodName: "GetDeviceMakeByName",
			Handler:    _DeviceDefinitionService_GetDeviceMakeByName_Handler,
		},
		{
			MethodName: "GetDeviceMakeBySlug",
			Handler:    _DeviceDefinitionService_GetDeviceMakeBySlug_Handler,
		},
		{
			MethodName: "GetDeviceMakeByTokenID",
			Handler:    _DeviceDefinitionService_GetDeviceMakeByTokenID_Handler,
		},
		{
			MethodName: "GetDeviceMakes",
			Handler:    _DeviceDefinitionService_GetDeviceMakes_Handler,
		},
		{
			MethodName: "GetIntegrations",
			Handler:    _DeviceDefinitionService_GetIntegrations_Handler,
		},
		{
			MethodName: "GetIntegrationByID",
			Handler:    _DeviceDefinitionService_GetIntegrationByID_Handler,
		},
		{
			MethodName: "GetDeviceDefinitionIntegration",
			Handler:    _DeviceDefinitionService_GetDeviceDefinitionIntegration_Handler,
		},
		{
			MethodName: "GetDeviceImagesByIDs",
			Handler:    _DeviceDefinitionService_GetDeviceImagesByIDs_Handler,
		},
		{
			MethodName: "CreateDeviceDefinition",
			Handler:    _DeviceDefinitionService_CreateDeviceDefinition_Handler,
		},
		{
			MethodName: "CreateDeviceIntegration",
			Handler:    _DeviceDefinitionService_CreateDeviceIntegration_Handler,
		},
		{
			MethodName: "CreateDeviceStyle",
			Handler:    _DeviceDefinitionService_CreateDeviceStyle_Handler,
		},
		{
			MethodName: "CreateDeviceMake",
			Handler:    _DeviceDefinitionService_CreateDeviceMake_Handler,
		},
		{
			MethodName: "CreateIntegration",
			Handler:    _DeviceDefinitionService_CreateIntegration_Handler,
		},
		{
			MethodName: "UpdateDeviceDefinition",
			Handler:    _DeviceDefinitionService_UpdateDeviceDefinition_Handler,
		},
		{
			MethodName: "SetDeviceDefinitionImage",
			Handler:    _DeviceDefinitionService_SetDeviceDefinitionImage_Handler,
		},
		{
			MethodName: "GetFilteredDeviceDefinition",
			Handler:    _DeviceDefinitionService_GetFilteredDeviceDefinition_Handler,
		},
		{
			MethodName: "GetDeviceStyleByID",
			Handler:    _DeviceDefinitionService_GetDeviceStyleByID_Handler,
		},
		{
			MethodName: "GetDeviceStyleByExternalID",
			Handler:    _DeviceDefinitionService_GetDeviceStyleByExternalID_Handler,
		},
		{
			MethodName: "GetDeviceStylesByDeviceDefinitionID",
			Handler:    _DeviceDefinitionService_GetDeviceStylesByDeviceDefinitionID_Handler,
		},
		{
			MethodName: "GetDeviceStylesByFilter",
			Handler:    _DeviceDefinitionService_GetDeviceStylesByFilter_Handler,
		},
		{
			MethodName: "UpdateDeviceMake",
			Handler:    _DeviceDefinitionService_UpdateDeviceMake_Handler,
		},
		{
			MethodName: "UpdateDeviceStyle",
			Handler:    _DeviceDefinitionService_UpdateDeviceStyle_Handler,
		},
		{
			MethodName: "GetDeviceTypesByID",
			Handler:    _DeviceDefinitionService_GetDeviceTypesByID_Handler,
		},
		{
			MethodName: "GetDeviceTypes",
			Handler:    _DeviceDefinitionService_GetDeviceTypes_Handler,
		},
		{
			MethodName: "CreateDeviceType",
			Handler:    _DeviceDefinitionService_CreateDeviceType_Handler,
		},
		{
			MethodName: "UpdateDeviceType",
			Handler:    _DeviceDefinitionService_UpdateDeviceType_Handler,
		},
		{
			MethodName: "DeleteDeviceType",
			Handler:    _DeviceDefinitionService_DeleteDeviceType_Handler,
		},
		{
			MethodName: "GetDeviceDefinitionHardwareTemplateByID",
			Handler:    _DeviceDefinitionService_GetDeviceDefinitionHardwareTemplateByID_Handler,
		},
		{
			MethodName: "SyncDeviceDefinitionsWithElasticSearch",
			Handler:    _DeviceDefinitionService_SyncDeviceDefinitionsWithElasticSearch_Handler,
		},
		{
			MethodName: "GetIntegrationByTokenID",
			Handler:    _DeviceDefinitionService_GetIntegrationByTokenID_Handler,
		},
		{
			MethodName: "GetDeviceDefinitionByMakeAndYearRange",
			Handler:    _DeviceDefinitionService_GetDeviceDefinitionByMakeAndYearRange_Handler,
		},
		{
			MethodName: "GetDeviceDefinitionOnChainByID",
			Handler:    _DeviceDefinitionService_GetDeviceDefinitionOnChainByID_Handler,
		},
		{
			MethodName: "GetDeviceDefinitionsOnChain",
			Handler:    _DeviceDefinitionService_GetDeviceDefinitionsOnChain_Handler,
		},
		{
			MethodName: "GetDeviceDefinitionBySlugName",
			Handler:    _DeviceDefinitionService_GetDeviceDefinitionBySlugName_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetDeviceDefinitionBySource",
			Handler:       _DeviceDefinitionService_GetDeviceDefinitionBySource_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "pkg/grpc/device_definition.proto",
}
